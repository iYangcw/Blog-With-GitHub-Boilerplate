{"posts": [{"title": "\u901a\u8fc7 netns \u4ee5\u53ca veth bridge \u7c7b\u578b\u521b\u5efa IP", "date": "2023-08-17T09:00:00-00.00", "path": "/Blog-With-GitHub-Boilerplate/archives/\u901a\u8fc7 netns \u4ee5\u53ca veth bridge \u7c7b\u578b\u521b\u5efa IP/", "text": "1\u3001\u901a\u8fc7 netns \u4ee5\u53ca veth bridge \u7c7b\u578b\u521b\u5efa IP\n\u94fe\u63a5\nip netns man url\nip link man url\nIntroduction to Linux interfaces for virtual networking\nHow Do Kubernetes and Docker Create IP Addresses?\n\u76f8\u5173\u4fe1\u606f\n\u670d\u52a1\u5668\u4fe1\u606f\uff1aCentOS Linux release 7.9.2009 (Core)  3.10.0-1160.el7.x86_64\nnetns \u4fe1\u606f\n\n\nnetns name\nhost device and IP\nnetns device and IP\n\n\n\n\nns_dustin\nveth_dustin/10.0.0.10\nveth_ns_dustin/10.0.0.11\n\n\nveth_ns_dustin\nveth_leah/10.0.0.20\nveth_ns_leah/10.0.0.21\n\n\n\nbridge \u4fe1\u606f\nbridge_home 10.0.0.1\n\u4e0b\u8ff0\u64cd\u4f5c\u5b66\u5230\u4e00\u70b9\uff0c\u5c31\u662f\u7f51\u7edc\u8bbf\u95ee\u5f02\u5e38\u7684\u65f6\u5019\uff0c\u53c8\u4e0d\u786e\u8ba4\u662f\u9632\u706b\u5899\u90a3\u4e2a\u7b56\u7565\u5bfc\u81f4\uff0c\u53ef\u4ee5\u901a\u8fc7\u4e0b\u8ff0\u64cd\u4f5c\u4e00\u70b9\u70b9\u5012\u63a8\u3002\n#\u901a\u8fc7 diff \u7684\u5dee\u5f02\u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u4e00\u70b9\u70b9\u5012\u63a8\uff1b\u4e0b\u8ff0\u64cd\u4f5c\u9047\u5230\u7684\u5f02\u5e38\u5927\u90e8\u5206\u662f\u901a\u8fc7\u8fd9\u4e2a\u5012\u63a8\u7684\uff0c\u4e0d\u77e5\u9053\u6709\u4ec0\u4e48\u66f4\u7cbe\u786e\u7684\u65b9\u6cd5\u6765\u5b9a\u4f4d\u662f\u90a3\u4e2a firewalld \u5bfc\u81f4\u7684\niptables --line-number -t filter -nvxL &gt; 1.filter\n\u53d1\u8d77 ping curl \u7b49\u64cd\u4f5c\niptables --line-number -t filter -nvxL &gt; 2.filter\ndiff 1.filter 2.filter\n\nnetns and loopback device\n\u521b\u5efa netns \u4ee5\u53ca\u542f\u52a8 netns \u4e0b\u7684 loopback device\nhost server \npython3 -m http.server 8080\n# Create netns\nsudo ip netns add netns_dustin\n# show all of the named network namespaces\uff0c\u5176\u5b9e\u4fe1\u606f\u4f4d\u4e8e /var/run/netns\nsudo ip netns list\n# netns server\nsudo ip netns exec netns_dustin python3 -m http.server 8080\n\n# \u521a\u5f00\u59cb loopback \u8bbe\u5907\u72b6\u6001\u4e3a DOWN\nsudo ip netns exec netns_dustin ip address list\n1: lo: &lt;LOOPBACK&gt; mtu 65536 qdisc noop state DOWN group default qlen 1000\n    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00\n\n# \u542f\u52a8\uff0clo \u72b6\u6001\u53d8\u4e3a UNKNOWN \uff0c\u4e0d\u662f UP \uff0c\u4f46\u662f\u4e0d\u5f71\u54cd\nsudo ip netns exec netns_dustin ip link set dev lo up\n# \u53ef\u4ee5\u8bbf\u95ee netns \u4e0b\u7684\u7aef\u53e3\u4e86\nsudo ip netns exec netns_dustin curl localhost:8080\n\nCreate veth \uff1aVirtual ethernet interface\nsudo ip link add dev veth_dustin type veth peer name veth_ns_dustin\n\n# \u53ef\u4ee5\u770b\u5230\u4e24\u4e2a\u8bbe\u5907\u7684\u72b6\u6001\u5747\u4e3a DOWN\nip link list\n6: veth_ns_dustin@veth_dustin: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    link/ether 82:0a:e9:66:7f:40 brd ff:ff:ff:ff:ff:ff\n7: veth_dustin@veth_ns_dustin: &lt;BROADCAST,MULTICAST,M-DOWN&gt; mtu 1500 qdisc noop state DOWN mode DEFAULT group default qlen 1000\n    link/ether 0e:c1:c3:7d:fa:b6 brd ff:ff:ff:ff:ff:ff\n\nsudo ip link set dev veth_dustin up\n\n# move veth_ns_dustin device to the netns_dustin network namespace\nsudo ip link set veth_ns_dustin netns netns_dustin\n\n# \u518d\u6267\u884c ip link list \u80fd\u770b\u5230 veth_ns_dustin \u8bbe\u5907\u4e0d\u5728\u4e86\n\nsudo ip netns exec netns_dustin ip link list\nsudo ip netns exec netns_dustin ip link set dev veth_ns_dustin up\n\nCreate Virtual IP Addresses For veth\nsudo ip address add 10.0.0.10/24 dev veth_dustin\nsudo ip netns exec netns_dustin ip address add 10.0.0.11/24 dev veth_ns_dustin\n\n\u6b64\u65f6\uff0c\u4e92\u76f8 ping \u4ee5\u53ca\u672c\u673a\u8c03\u7528 netns \u4e0b\u7684\u670d\u52a1\uff0c\u7f51\u7edc\u6b63\u5e38\n\u76f8\u4e92 ping \u6b63\u5e38\nping 10.0.0.10 -c 1\nping 10.0.0.11 -c 1\nsudo ip netns exec netns_dustin ping 10.0.0.10 -c 1\nsudo ip netns exec netns_dustin ping 10.0.0.11 -c 1\n# \u672c\u673a\u8bbf\u95ee netns \u7aef\u53e3\u6b63\u5e38\ncurl 10.0.0.11:8080\n\nnetns \u8c03\u7528\u672c\u673a veth device IP \u670d\u52a1\n\u5982\u679c\u4e3b\u673a\u6ca1\u6709\u5f00\u542f\u9632\u706b\u5899\uff0c\u6b63\u5e38\u662f\u80fd\u901a\u7684\uff1b\u672c\u6b21\u6d4b\u8bd5\u7684\u4e3b\u673a firewalld \u662f\u5f00\u542f\u7684\uff0c\u4ee5\u4e0b\u547d\u4ee4\u5f02\u5e38\n# \u63d0\u793a curl: (7) Failed connect to 10.0.0.10: 8080; No route to host \uff0c\u6309\u7167\u5982\u4e0b\u64cd\u4f5c\u5f00\u542f 8080/tcp \u653e\u5f00\nsudo ip netns exec netns_dustin curl 10.0.0.10:8080\n\n# \u7ecf\u6392\u67e5\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u672c\u673a firewalld \u542f\u52a8\u5bfc\u81f4\uff0c\u628a 8080 \u7aef\u53e3\u653e\u5f00\u540e\uff0c\u518d\u8c03\u7528\u4e0a\u8ff0\u547d\u4ee4\u6b63\u5e38\nfirewall-cmd --zone=public --add-port=8080/tcp --permanent\nfirewall-cmd --reload\nfirewall-cmd --query-port=8080/tcp\nfirewall-cmd --list-port\n\nnetns \u8c03\u7528\u672c\u673a device IP \u670d\u52a1\nip addr \u786e\u5b9a\u672c\u673a\u8bbe\u5907\uff0c\u4fe1\u606f\u4e3a ens33 192.168.211.131\n# \u8c03\u7528\u672c\u5730\u5f02\u5e38\uff0c\u63d0\u793a curl: (7) Failed to connect to 192.168.211.131: Network is unreachable\nsudo ip netns exec netns_dustin curl 192.168.211.131:8080\n\n# \u9519\u8bef\u4fe1\u606f\u662f\u56e0\u4e3a\u4e0d\u77e5\u9053 how to route the 192.168.211.131 address\n# if it can&#39;t find a suitable route for our request then direct the request to 10.0.0.10\n# \u6dfb\u52a0\u8def\u7531\u540e\uff0c\u4e0a\u8ff0 curl \u6b63\u5e38\nsudo ip netns exec netns_dustin ip route add default via 10.0.0.10\n\n# \u4e3a\u4ec0\u4e48\u6dfb\u52a0\u4e0a\u8ff0 route \u4fe1\u606f\u6b63\u5e38\uff1f\u662f\u56e0\u4e3a 10.0.0.10 \u4f4d\u4e8e host network namespace\uff1bhost network namespace \u6709 route \u4fe1\u606f\u5230 192.168.112.131\n# netns_dustin --&gt; veth_dustin --&gt; \u4e3b\u673a\u7f51\u7edc\u6808 --&gt; ens33 --&gt; 192.168.211.131\nip route list\ndefault via 192.168.211.2 dev ens33 proto static metric 100\n10.0.0.0/24 dev veth_dustin proto kernel scope link src 10.0.0.10\n192.168.211.0/24 dev ens33 proto kernel scope link src 192.168.211.131 metric 100\n\nAccess Internet From netns\nping \u57df\u540d\u5f02\u5e38\uff0cping: www.baidu.com: Name or service not known\nsudo ip netns exec netns_dustin ping www.baidu.com -c 1\n\n# ping IP \u5f02\u5e38\uff0cFrom 10.0.0.10 icmp_seq = 1 Destination Host Prohibited\nsudo ip netns exec netns_dustin ping 8.8.8.8\n\n\n\u672c\u673a\u5f00\u542f\u8f6c\u53d1\n/proc/sys/net/ipv4/ip_forward 1 \u8868\u793a\u8f6c\u53d1\necho 1 | sudo tee /proc/sys/net/ipv4/ip_forward 0 \u7684\u8bdd\u6309\u7167\u8fd9\u4e2a\u5f00\u542f\u4e0b\n\n\n\u786e\u8ba4 physical device \nip address list \uff0c\u9009\u62e9\u4e86 ens33   192.168.211.131\n\n\n\u9632\u706b\u5899\n\nvirtual device to the physical device\uff1asudo iptables --append FORWARD --in-interface veth_dustin --out-interface ens33 --jump ACCEPT\nphysical device to the virtual device\uff1asudo iptables --append FORWARD --in-interface ens33 --out-interface veth_dustin --jump ACCEPT\n\u6e90\u5730\u5740\u8f6c\u6362\uff1asudo iptables --append POSTROUTING --table nat --out-interface ens33 --jump MASQUERADE\n\u4e0a\u8ff0 FORWARD \u5982\u679c\u4f7f\u7528 --append \u53c2\u6570\u8ffd\u52a0\u5230\u6700\u540e\uff0c\u540e\u9762\u6d4b\u8bd5\u4f1a\u6709\u95ee\u9898\uff0c\u7b2c\u4e94\u6b65\u6709\u8be6\u7ec6\u8bf4\u660e\uff0c\u9ed8\u8ba4\u7684\u662f\u4fe1\u606f\u5982\u4e0b\niptables --line-number -t filter -nvx -L FORWARD\n19         20     1296 REJECT     all  --               0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n\n\n\n\n\u6309\u7167\u4e0a\u8ff0\u64cd\u4f5c\u540e\uff0cping IP \u6b63\u5e38\uff0cping \u57df\u540d\u8fd8\u662f\u5f02\u5e38\nConfig netns's resolv.conf\n\u914d\u7f6e DNS\nsudo mkdir -p /etc/netns/netns_dustin\necho &quot;nameserver 8.8.8.8&quot; &gt; /etc/netns/netns_dustin/resolv.conf\n# \u9a8c\u8bc1 DNS \u914d\u7f6e\nsudo ip netns exec netns_dustin cat /etc/resolv.conf\nnameserver 8.8.8.8\n\n\u4f46\u662f ping \u57df\u540d\u8fd8\u662f\u5f02\u5e38\uff0c\u53ef\u80fd\u662f\u7531\u4e8e\u4e3b\u673a\u7684 firewalld \u670d\u52a1\u5f00\u542f\u5bfc\u81f4\uff0c\u653e\u5f00 53/udp \u5c1d\u8bd5\u4e0b\nsudo ip netns exec netns_dustin ping www.baidu.com\nping: www.baidu.com: Name or service not known\n\n# \u653e\u5f00 53/udp \u4ee5\u53ca 53/tcp\nfirewall-cmd --zone=public --add-port=53/udp --permanent\nfirewall-cmd --reload\nfirewall-cmd --query-port=53/udp\nfirewall-cmd --list-port\n\nfirewall-cmd --reload \u6267\u884c\u540e\uff0c\u628a Access Internet From netns \u5904\u64cd\u4f5c\u7684\u9632\u706b\u5899\u90e8\u5206\u7ed9\u5237\u6389\u4e86\uff0c\u6240\u4ee5\u518d\u6b21\u6267\u884c\u4e0b\n\u67e5\u770b\nsudo iptables --line -L FORWARD\nsudo iptables --line -t nat -L POSTROUTING\n# \u518d\u6b21\u6dfb\u52a0\nsudo iptables --append FORWARD --in-interface veth_dustin --out-interface ens33 --jump ACCEPT\nsudo iptables --append FORWARD --in-interface ens33 --out-interface veth_dustin --jump ACCEPT\nsudo iptables --append POSTROUTING --table nat --out-interface ens33 --jump MASQUERADE\n# \u518d\u6b21\u67e5\u770b sudo iptables --line -L FORWARD\nChain FORWARD (policy DROP)\n......\n20   ACCEPT     all  --  anywhere             anywhere\n21   ACCEPT     all  --  anywhere             anywhere\n# \u518d\u6b21\u67e5\u770b sudo iptables --line -t nat -L POSTROUTING\nChain POSTROUTING (policy ACCEPT)\n........\n6    MASQUERADE  all  --  anywhere             anywhere\n\n\n# \u518d\u6b21\u9a8c\u8bc1 ping \u57df\u540d\uff0c\u8fd8\u662f\u5931\u8d25 ping: www.baidu.com: Name or service not known\nsudo ip netns exec netns_dustin ping www.baidu.com\n\n\u4e0d\u592a\u786e\u8ba4\u6b64\u65f6\u8fd8\u662f\u65e0\u6cd5 ping \u57df\u540d\u5931\u8d25\u539f\u56e0\uff0c\u5f85\u5b9a\n\u540e\u7eed\u6293\u5305\u5b9a\u4f4d\u4e86\uff0c\u53d1\u73b0 ICMP \u5f02\u5e38 ; \u5b9e\u9645\u786e\u5b9a\u4e86\u901a\u8fc7\u4e3b\u673a\u6d4b\u8bd5 PING \u6b63\u5e38\uff1aping -I 10.0.0.10 10.0.0.11\n\u786e\u8ba4 netns \u7684 PID\nip netns pids netns_dustin\n2171\n# \u8fdb\u5165\uff0c\u6267\u884c ip addr \u786e\u8ba4\nnsenter -n --target 2171\n# netns \u7a7a\u95f4\u6293\u5305\ntcpdump -i any -w netns_ping_hosts.pcap\n# \u4e3b\u673a\u6293\u5305\ntcpdump -i any -w hosts_ping_hosts.pcap\n# \u4e3b\u673a\u8bbf\u95ee netns\nsudo ip netns exec netns_dustin ping www.baidu.com\n\n# \u6293\u5305\u5f02\u5e38\u4fe1\u606f\n12  3.303467    10.0.0.10   10.0.0.11   ICMP    102 Destination unreachable (Host administratively prohibited)\n\n\u540e\u60f3\u5230\u53ef\u80fd\u662f iptables \u89c4\u5219\u9650\u5236\u5bfc\u81f4\uff0c\u4e0d\u786e\u5b9a\u662f\u54ea\u4e2a chain \u5bfc\u81f4\uff0c\u901a\u8fc7\u4ee5\u4e0b\u547d\u4ee4\u4e00\u6b65\u6b65\u5012\u63a8\niptables -t filter -nvxL &gt;01.filter\n# \u53d1\u4e0b curl \u8bf7\u6c42\nsudo ip netns exec netns_dustin ping www.baidu.com\niptables -t filter -nvxL &gt;02.filter\n\n# diff \u6bd4\u8f83\uff0c\u5185\u5bb9\u6bd4\u8f83\u591a\uff0c\u770b\u4e0b\u6765\u53ef\u80fd\u548c\u4e0b\u9762\u8fd9\u4e2a\u6bd4\u8f83\u63a5\u8fd1\nREJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n# \u518d\u7ec6\u5206\u6790\uff0c\u4e0a\u8ff0 REJECT \u5bf9\u5e94\u7684 Chain \u4e3a FORWARD\n# iptables --line-number -t filter -nvx -L FORWARD\nChain FORWARD (policy DROP 0 packets, 0 bytes)\nnum      pkts      bytes target     prot opt in     out     source               destination\n1          20     1296 DOCKER-ISOLATION-STAGE-1  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n2          20     1296 DOCKER-USER  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n3           0        0 ACCEPT     all  --  *      test_bridge  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n4           0        0 DOCKER     all  --  *      test_bridge  0.0.0.0/0            0.0.0.0/0\n5           0        0 ACCEPT     all  --  test_bridge !test_bridge  0.0.0.0/0            0.0.0.0/0\n6           0        0 ACCEPT     all  --  test_bridge test_bridge  0.0.0.0/0            0.0.0.0/0\n7           0        0 ACCEPT     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n8           0        0 DOCKER     all  --  *      docker0  0.0.0.0/0            0.0.0.0/0\n9           0        0 ACCEPT     all  --  docker0 !docker0  0.0.0.0/0            0.0.0.0/0\n10          0        0 ACCEPT     all  --  docker0 docker0  0.0.0.0/0            0.0.0.0/0\n11          0        0 ACCEPT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate RELATED,ESTABLISHED\n12          0        0 ACCEPT     all  --  lo     *       0.0.0.0/0            0.0.0.0/0\n13         20     1296 FORWARD_direct  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n14         20     1296 FORWARD_IN_ZONES_SOURCE  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n15         20     1296 FORWARD_IN_ZONES  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n16         20     1296 FORWARD_OUT_ZONES_SOURCE  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n17         20     1296 FORWARD_OUT_ZONES  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n18          0        0 DROP       all  --  *      *       0.0.0.0/0            0.0.0.0/0            ctstate INVALID\n19         20     1296 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n20          0        0 ACCEPT     all  --  veth_dustin ens33   0.0.0.0/0            0.0.0.0/0\n21          0        0 ACCEPT     all  --  ens33  veth_dustin  0.0.0.0/0            0.0.0.0/0\n\n\u770b\u4e0b\u6765\u53ef\u80fd\u662f\u7531\u4e8e 20 \u548c 21 \u7684\u4e24\u4e2a ACCEPT \u5728 REJECT     all \u4e4b\u540e\u5bfc\u81f4\u8be5\u95ee\u9898\uff0c\u6309\u7167\u4e0b\u8ff0\u518d\u64cd\u4f5c\n\u91cd\u65b0\u5904\u7406 ACCEPT \u7684 iptables \u89c4\u5219\uff0c\u8c03\u8bd5\u4e0b\u770b\u4e0b\u7ed3\u679c\n# \u539f\u547d\u4ee4\nsudo iptables --append FORWARD --in-interface veth_dustin --out-interface ens33 --jump ACCEPT\nsudo iptables --append FORWARD --in-interface ens33 --out-interface veth_dustin --jump ACCEPT\n\n# \u5220\u9664\niptables -t filter -D FORWARD 21\niptables -t filter -D FORWARD 20\n# \u786e\u8ba4\niptables --line-number -t filter -nvx -L FORWARD\n# \u5728\u6307\u5b9a\u8868\u7684\u6307\u5b9a\u94fe\u7684\u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u6761\u89c4\u5219\niptables -t filter -I FORWARD 19 --in-interface veth_dustin --out-interface ens33 --jump ACCEPT\niptables -t filter -I FORWARD 19 --in-interface ens33 --out-interface veth_dustin --jump ACCEPT\n\n# \u6309\u7167\u7406\u89e3\uff0c\u73b0\u5728 ping \u57df\u540d\u6b63\u5e38\u4e86\uff0c\u5b9e\u9645\u4e5f\u786e\u5b9e\u6b63\u5e38\u4e86\nsudo ip netns exec netns_dustin ping www.baidu.com\n\n\u7531\u4e8e\u8c03\u8bd5\u7684\u65f6\u5019\u6709\u4e2a\u8bef\u64cd\u4f5c\uff0c\u9632\u706b\u5899\u589e\u52a0\u4e86 icmp-block \uff0c\u5bfc\u81f4\u4e00\u76f4 ping \u5f02\u5e38\u7684\u95ee\u9898\n\u589e\u52a0\u4e86\u4e0b\u8ff0\u547d\u4ee4\uff0c\u5bfc\u81f4 ping IP \u548c\u57df\u540d\u7684\u65f6\u5019\u5747\u63d0\u793a\uff1aDestination Host Prohibited\uff0c\u4e0b\u8ff0 iptables \u4fe1\u606f\u662f\u5fd8\u8bb0\u8fd9\u4e2a\u8bef\u64cd\u4f5c\u7684\u65f6\u5019\u4e00\u5c42\u5c42\u5012\u9000\u7684\uff0c\u7136\u540e\u624d\u60f3\u5230\u8fd9\u4e2a\u95ee\u9898\n# \u589e\u52a0 icmp-block\nsudo firewall-cmd --zone = public --add-icmp-block ={echo-request, echo-reply} --permanent\n# \u79fb\u9664 icmp-block\nsudo firewall-cmd --zone = public --remove-icmp-block ={echo-request, echo-reply} --permanent\n# \u6838\u5b9eicmp-block\u5f53\u524d\u72b6\u6001\nsudo firewall-cmd --zone = public --list-icmp-blocks\n\n\u5012\u63a8\u8fc7\u7a0b\n\u53ef\u80fd\u662f Chain FWDI_public_deny (1 references)\uff1b\u8be5\u89c4\u5219\u62d2\u7edd\u4e86\u6765\u81ea\u4efb\u4f55\u6e90 IP \u7684 ICMP \u6d41\u91cf\uff08\u7c7b\u578b\u4e3a 8\uff0c\u5373 ping \u8bf7\u6c42\uff09\u5e76\u4f7f\u7528 `icmp-host-prohibited` \u62d2\u7edd\u54cd\u5e94\uff1b\u4f46\u662f\u4e0d\u786e\u8ba4\u4e3a\u5565\u9632\u706b\u5899\u4f1a\u6709\u8fd9\u4e2a\u89c4\u5219\nChain FORWARD (policy DROP 0 packets, 0 bytes)\n15         55     4072 FORWARD_IN_ZONES  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n\nChain FORWARD_IN_ZONES (1 references)\n1           0        0 FWDI_public  all  --  ens36  *       0.0.0.0/0            0.0.0.0/0           [goto]\n\nChain FWDI_public (3 references)\n2          55     4072 FWDI_public_deny  all  --  *      *       0.0.0.0/0            0.0.0.0/0\n\nChain FWDI_public_deny (1 references)\n1          27     2268 REJECT     icmp --  *      *       0.0.0.0/0            0.0.0.0/0            icmptype 8 reject-with icmp-host-prohibited\n\ncommunicate across multiple network namespaces\nsudo ip link add dev veth_leah type veth peer name veth_ns_leah\nsudo ip link set dev veth_leah up\nsudo ip address add 10.0.0.20/24 dev veth_leah\nsudo ip netns add netns_leah\nsudo ip link set dev veth_ns_leah netns netns_leah\nsudo ip netns exec netns_leah ip link set dev lo up\nsudo ip netns exec netns_leah ip link set dev veth_ns_leah up\nsudo ip netns exec netns_leah ip address add 10.0.0.21/24 dev veth_ns_leah\nsudo ip netns exec netns_leah ip route add default via 10.0.0.20\nsudo ip netns exec netns_leah python3 -m http.server 8080\n\nnetns \u4e4b\u95f4\u7f51\u7edc\u4e92 ping\uff0c\u53d1\u73b0\u65e0\u6cd5\u8fde\u63a5\uff1b\u672c\u673a ping \u4e4b\u524d\u7684 netns \u4ecd\u7136\u6b63\u5e38\n\u6b63\u5e38\nping 10.0.0.11 -c 1\n# \u4e3b\u673a &gt; netns_leah IP\nping 10.0.0.21 -c 1\n# netns_dustin &gt; netns_leah IP\nsudo ip netns exec netns_dustin ping 10.0.0.21 -c 1\n# netns_leah &gt; netns_dustin IP\nsudo ip netns exec netns_leah ping 10.0.0.11 -c 1\n\n\u65e0\u6cd5 ping \u7684\u539f\u56e0\u5982\u4e0b\uff1a\nIP \u8def\u7531\u5c06\u4f7f\u7528\u7b2c\u4e00\u4e2a 10.0.0.0/24 \u8def\u7531\u8fdb\u884c\u4efb\u4f55\u5339\u914d\uff0c\u8fd9\u610f\u5473\u7740\u6240\u6709 10.0.0.0/24 \u6d41\u91cf\u5c06\u901a\u8fc7 veth_dustin \u63a5\u53e3\u5b9a\u5411\u3002\u5373\u4f7f\u6709\u65f6\u5e0c\u671b\u6d41\u91cf\u901a\u8fc7 veth_leah \u63a5\u53e3\u5b9a\u5411\u3002\nip route list\n# 10.0.0.0/24 dev veth_leah proto kernel scope link src 10.0.0.20 \u8fd9\u6761\u8def\u7531\u5176\u5b9e\u662f\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u81ea\u52a8\u589e\u52a0\u7684\u8def\u7531\u4fe1\u606f\uff1b\u5b9e\u9645\u6d4b\u8bd5\u4e0b\u6765\u6267\u884c\u4e0b\u9762\u4e09\u6761\u547d\u4ee4\uff0c\u5373\u4f1a\u81ea\u52a8\u589e\u52a0\u8def\u7531\u4fe1\u606f\n# sudo ip link add dev veth_leah type veth peer name veth_ns_leah\n# sudo ip link set dev veth_leah up\n# sudo ip address add 10.0.0.20/24 dev veth_leah\ndefault via 192.168.211.2 dev ens33 proto static metric 102\n10.0.0.0/24 dev veth_dustin proto kernel scope link src 10.0.0.10\n10.0.0.0/24 dev veth_leah proto kernel scope link src 10.0.0.20\n\n\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e\u4e0d\u540c\u533a\u57df\u7684 IP \u6765\u89e3\u51b3\uff0c\u5927\u81f4\u5982\u4e0b\uff08\u4e0b\u8ff0\u64cd\u4f5c\u53ef\u4ee5\u4e0d\u505a\uff0c\u4e0d\u5f71\u54cd\u672c\u6587\u6863\u4e3b\u6d41\u7a0b\uff09\uff1a\nsudo ip link add dev veth_test_01 type veth peer name veth_ns_test_01\nip link set dev veth_test_01 up\nip address add 10.0.1.10/24 dev veth_test_01\n\n# \u518d\u67e5\u770b\u4e00\u4e0b\u4e3b\u673a\u7684 route\uff0c\u53d1\u73b0\u65b0\u589e\u4e00\u4e2a\uff0c\u548c\u4e4b\u524d\u8bbe\u7f6e\u7684 IP \u4e0d\u4e00\u6837\nip route list\ndefault via 192.168.211.2 dev ens33 proto static metric 102\n10.0.0.0/24 dev veth_dustin proto kernel scope link src 10.0.0.10\n......\n10.0.1.0/24 dev veth_test_01 proto kernel scope link src 10.0.1.10\n\n# \u4e0d\u5149\u64cd\u4f5c\u4e0a\u8ff0\u4e09\u4e2a\u547d\u4ee4\uff0c\u8fd8\u6709\u7ed9 netns \u8bbe\u7f6e\u7684\u9ed8\u8ba4\u8def\u7531\uff0c\u4e5f\u5f97\u6839\u636e\u4e0a\u8ff0 IP \u4e00\u5e76\u4fee\u6539\uff1b\u4e0b\u9762\u7684\u8def\u7531\u4fe1\u606f\u9700\u8981\u4fee\u6539 IP\uff0cnetns device IP \u5e94\u8be5\u662f\u53ef\u4ee5\u4e0d\u4fee\u6539\uff1b\u53ef\u4ee5\u7b80\u5355\u7406\u89e3\u4e3a\u4e0d\u540c\u7684 netns \u76f8\u4e92\u4e0d\u5e72\u6d89\nsudo ip netns exec netns_leah ip address add 10.0.0.21/24 dev veth_ns_leah\nsudo ip netns exec netns_leah ip route add default via 10.0.1.10\n\n\u6309\u7167\u4e0a\u8ff0\u64cd\u4f5c\uff0c\u64cd\u4f5c\u590d\u6742\u4e14\u91cd\u590d\uff0c\u540e\u9762\u901a\u8fc7 Linux virtual bridge devices \u5b9e\u73b0\nCreate virtual bridge to join veth pairs\n\u6700\u7ec8\u6548\u679c\u56fe\u5982\u4e0b\nimage-20230816155731081\nbridge \u5141\u8bb8\u591a\u4e2a\u4ee5\u592a\u7f51\u548c\u865a\u62df\u4ee5\u592a\u7f51\u8bbe\u5907\u76f8\u4e92\u901a\u4fe1\nsudo ip link add dev bridge_home type bridge\nsudo ip address add 10.0.0.1/24 dev bridge_home\nsudo ip link set bridge_home up\n\n# \u9a8c\u8bc1\uff0c\u53ef\u4ee5\u770b\u5230 bridge_home \uff0c\u72b6\u6001\u4e3a UNKNOWN [\u4e0d\u662f UP \uff0c\u4f46\u662f\u770b\u4e0b\u6765\u4e0d\u5f71\u54cd]\nip link list\n\n\u5c06\u4e3b\u673a\u7684\u4e24\u4e2a\u8bbe\u5907\u8fde\u63a5\u5230 bridge\uff1a\u6b64\u65f6\u53d1\u73b0\u4e3b\u673a ping 10.0.0.11 \u4e0d\u901a\uff1b\u6709\u91cd\u65b0\u9a8c\u8bc1\u8fc7\uff0c\u6682\u65f6\u539f\u56e0\u4e0d\u786e\u5b9a\nsudo ip link set dev veth_dustin master bridge_home\nsudo ip link set dev veth_leah master bridge_home\n\n\u66f4\u6539 netns \u7684\u9ed8\u8ba4\u8def\u7531\uff0c\u6539\u6210 use the bridge_home IP address\nsudo ip netns exec netns_dustin ip route delete default via 10.0.0.10\nsudo ip netns exec netns_dustin ip route add default via 10.0.0.1\nsudo ip netns exec netns_leah ip route delete default via 10.0.0.20\nsudo ip netns exec netns_leah ip route add default via 10.0.0.1\n\n10.0.0.0/24 \u5339\u914d\u7684\u4e09\u6761\u8def\u7531\uff08 veth_dustin \u3001 veth_leah \u548c bridge_home \uff09; \u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\u7684\u7b80\u5355\u65b9\u6848\u662f\u5220\u9664 veth_dustin \u548c veth_leah \u7684 IP \u5730\u5740\uff1b\u5220\u9664\u540e\uff0cping 10.0.0.11 \u6b63\u5e38\u4e86\nip route list\n\n......\n10.0.0.0/24 dev veth_dustin proto kernel scope link src 10.0.0.10\n10.0.0.0/24 dev veth_leah proto kernel scope link src 10.0.0.20\n10.0.0.0/24 dev bridge_home proto kernel scope link src 10.0.0.1\n172.17.0.0/16 dev docker0 proto kernel scope link src 172.17.0.1\n\n# \u5220\u9664 IP\nsudo ip address delete 10.0.0.10/24 dev veth_dustin\nsudo ip address delete 10.0.0.20/24 dev veth_leah\n\n# \u5220\u9664 IP \u540e\uff0c\u672c\u673a ping netns IP \u6b63\u5e38\uff0c\u4f46\u662f netns \u4e4b\u95f4 ping \u5f02\u5e38\n# \u6b63\u5e38\nping 10.0.0.11 -c 1\nping 10.0.0.21 -c 1\n# \u5f02\u5e38\nsudo ip netns exec netns_dustin ping 10.0.0.21 -c 1\nsudo ip netns exec netns_leah ping 10.0.0.11 -c 1\n# netns \u4e4b\u95f4 ping \u5f02\u5e38\u662f\u56e0\u4e3a\u76ee\u524d bridge_home \u4e0d\u80fd\u8f6c\u53d1\u6d41\u91cf\n# \u76ee\u524d bridge_home \u53ea\u80fd\u63a5\u53d7\u6765\u81ea veth_dustin \u548c veth_leah \u7684\u6d41\u91cf\n# \u4f46\u662f\u9700\u8981\u8f6c\u53d1\u5230 veth_leah \u548c veth_dustin \u7684\u6570\u636e\u5305\u90fd\u88ab bridge_home  \u4e22\u5f03\u4e86\n# \u589e\u52a0\u4e0b\u8ff0\u9632\u706b\u5899\u914d\u7f6e\nsudo iptables --append FORWARD --in-interface bridge_home --out-interface bridge_home --jump ACCEPT\n\n\u589e\u52a0\u4e0a\u8ff0\u9632\u706b\u5899\u914d\u7f6e\u540e\uff0cnetns \u4e4b\u95f4\u9a8c\u8bc1 ping \u548c curl \uff0c ping \u6b63\u5e38\uff0ccurl \u5f02\u5e38\nsudo ip netns exec netns_dustin ping 10.0.0.21 -c 1\nsudo ip netns exec netns_leah ping 10.0.0.11 -c 1\n# \u5f02\u5e38 curl: (7) Failed connect to 10.0.0.11: 8080; No route to host\nsudo ip netns exec netns_dustin curl 10.0.0.21:8080\nsudo ip netns exec netns_leah curl 10.0.0.11:8080\n\n\u6309\u7167\u8fd9\u4e2a\u547d\u4ee4\u64cd\u4f5c\uff0ccurl \u8fd8\u662f\u5f02\u5e38\uff0c\u63a8\u6d4b\u662f\u7531\u4e8e append \u8ffd\u52a0\u5230\u6700\u540e\uff0c\u524d\u9762\u6709 REJECT all \u5bfc\u81f4\uff1b\u5b9e\u9645\u770b\u4e0b\u6765\u5e94\u8be5\u786e\u5b9e\u662f\u8fd9\u4e2a\u539f\u56e0\nsudo iptables --append FORWARD\n\n\u91cd\u65b0\u914d\u7f6e\n\u67e5\u770b\niptables --line-number -t filter -nvx -L FORWARD\n......\n19         14      914 ACCEPT     all  --  veth_dustin ens33   0.0.0.0/0            0.0.0.0/0\n20          0        0 ACCEPT     all  --  ens33  veth_dustin  0.0.0.0/0            0.0.0.0/0\n21         17     1040 REJECT     all  --  *      *       0.0.0.0/0            0.0.0.0/0            reject-with icmp-host-prohibited\n22          0        0 ACCEPT     all  --  bridge_home bridge_home  0.0.0.0/0            0.0.0.0/0\n\n# \u5220\u9664\niptables -t filter -D FORWARD 22\n\n# \u786e\u8ba4\niptables --line-number -t filter -nvx -L FORWARD\n\n# \u5728\u6307\u5b9a\u8868\u7684\u6307\u5b9a\u94fe\u7684\u6307\u5b9a\u4f4d\u7f6e\u6dfb\u52a0\u4e00\u6761\u89c4\u5219\niptables -t filter -I FORWARD 21 --in-interface bridge_home --out-interface bridge_home --jump ACCEPT\n\n\u6e05\u7406\u4ee5\u524d\u7684\u89c4\u5219\niptables --line-number -t filter -nxvL FORWARD\n# \u5220\u9664\niptables -t filter -D FORWARD 20\niptables -t filter -D FORWARD 19\n\nnetns \u901a\u8fc7 bridge \u8bbf\u95ee\u5916\u7f51\u4e0d\u901a\uff0c\u89c1\u4e0b\nsudo ip netns exec netns_dustin curl http://www.baidu.com\ncurl: (6) Could not resolve host: www.baidu.com; Unknown error\n\nsudo ip netns exec netns_dustin ping 8.8.8.8\ncurl: (6) Could not resolve host: ping; Unknown error\n\n\u589e\u52a0\u4e0b\u8ff0\u64cd\u4f5c\uff0c\u8fde\u63a5\u5916\u7f51\u6b63\u5e38\n# \u67e5\u770b\uff0c\u53d1\u73b0\u6700\u540e\u4e00\u6b65\u662f REJECT     all\niptables --line-number -t filter -nxvL FORWARD\n\n# \u589e\u52a0\uff0c\u4e0d\u8981 append \u8ffd\u52a0\nsudo iptables -I  FORWARD 20 --in-interface bridge_home --out-interface ens33 --jump ACCEPT\nsudo iptables -I  FORWARD 21 --in-interface ens33 --out-interface bridge_home --jump ACCEPT\n\n# \u9a8c\u8bc1\u5916\u7f51\nsudo ip netns exec netns_dustin ping 8.8.8.8\nsudo ip netns exec netns_dustin ping www.baidu.com\nsudo ip netns exec netns_dustin curl http://www.baidu.com\n\nClean UP\nsudo ip link delete dev bridge_home\nsudo ip link delete dev veth_dustin\nsudo ip link delete dev veth_leah\nsudo ip netns delete netns_dustin\nsudo ip netns delete netns_leah\nsudo iptables --delete FORWARD --in-interface bridge_home --out-interface ens33 --jump ACCEPT\nsudo iptables --delete FORWARD --in-interface ens33 --out-interface bridge_home --jump ACCEPT\nsudo iptables --delete POSTROUTING --table nat --out-interface ens33 --jump MASQUERADE\n\n", "categories": [{"name": "Maverick", "slug": "Maverick", "permalink": "/Blog-With-GitHub-Boilerplate/category/Maverick/"}], "tags": [{"name": "TCP", "slug": "TCP", "permalink": "/Blog-With-GitHub-Boilerplate/tag/TCP/"}]}, {"title": "TCP\u53d1\u9001\u7a97\u53e3\u3001\u63a5\u6536\u7a97\u53e3\u3001wmem\u3001rmem \u5173\u7cfb", "date": "2023-05-01T14:00:00-00.00", "path": "/Blog-With-GitHub-Boilerplate/archives/TCP\u53d1\u9001\u7a97\u53e3\u3001\u63a5\u6536\u7a97\u53e3\u3001wmem\u3001rmem \u5173\u7cfb/", "text": "\u57fa\u7840\u73af\u5883\n\u670d\u52a1\u5668\u4fe1\u606f\nClient\uff1a192.168.56.100\nServer\uff1a192.168.56.101\nOS\uff1aCentOS Linux release 7.9.2009 (Core) 3.10.0-1160.el7.x86_64\n\u5927\u81f4\u601d\u8def\nwmem \u5bf9\u5e94 Send Buffer\uff0c\u4ece TCP \u7684\u6982\u5ff5\u53ef\u4ee5\u7406\u89e3\u4e3a \u53d1\u9001\u7a97\u53e3\uff0c\u5b57\u6bcd w \u53ef\u4ee5\u7406\u89e3\u6210 write\nrmem \u5bf9\u5e94 Receive Buffer\uff0c\u4ece TCP \u7684\u6982\u5ff5\u53ef\u4ee5\u7406\u89e3\u4e3a \u63a5\u6536\u7a97\u53e3\n\u5b9e\u9a8c\u8fc7\u7a0b\u662f\u6a21\u62df\u4e00\u4e2a\u4e0b\u8f7d\u8fc7\u7a0b\uff0c\u4e5f\u5c31\u662f\u5927\u81f4\u8fc7\u7a0b\u662f server \u53d1\u9001\u6587\u4ef6\uff0c\u6240\u4ee5\u8c03\u6574 wmwm\uff0cclient \u63a5\u6536\u6587\u4ef6\uff0c\u6240\u4ee5\u8c03\u6574 rmen\n\u76ee\u7684\u5982\u4e0b\uff1a\n\n\u5199\u6b7b Linux\u53c2\u6570\u8ba9\u4f20\u8f93\u901f\u5ea6\u6162\u4e0b\u6765\n\u6539\u63a5\u6536\u7aef\uff1asysctl -w \"net.ipv4.tcp_rmem=4096  4096    4096\"\n\u6216\u8005\n\u6539\u53d1\u9001\u7aef\uff1asysctl -w \"net.ipv4.tcp_wmem=4096  4096    4096\" \n\n\u7ee7\u7eed\u8c03\u6574rtt\u3001\u4e22\u5305\u7387\uff0ccurl\u9650\u5236\u901f\u5ea6\u7b49\uff0c\u6293\u5305\u5206\u6790\u770b\u5230\u7684\u6240\u6709\u73b0\u8c61\n\u7cfb\u7edf\u9ed8\u8ba4\u53c2\u6570\u5982\u4e0b\n$ sudo sysctl -a | egrep &quot;rmem|wmem|tcp_mem|adv_win|moderate&quot;\nnet.core.rmem_default = 212992\nnet.core.rmem_max = 212992\nnet.core.wmem_default = 212992\nnet.core.wmem_max = 212992\nnet.ipv4.tcp_adv_win_scale = 1\nnet.ipv4.tcp_mem = 42459    56612   84918\nnet.ipv4.tcp_moderate_rcvbuf = 1\nnet.ipv4.tcp_rmem = 4096    87380   6291456 //\u6700\u5c0f\u503c  \u9ed8\u8ba4\u503c  \u6700\u5927\u503c\nnet.ipv4.tcp_wmem = 4096    16384   4194304 //\u6700\u5c0f\u503c  \u9ed8\u8ba4\u503c  \u6700\u5927\u503c\nnet.ipv4.udp_rmem_min = 4096\nnet.ipv4.udp_wmem_min = 4096\nvm.lowmem_reserve_ratio = 256   256 32\n\n\u5f00\u59cb\u547d\u4ee4\n# Client &amp;&amp; Server\nclientIP=&quot;192.168.56.100&quot;\nserverIP=&quot;192.168.56.101&quot;\n\n# Server\n# \u542f\u52a8\u547d\u4ee4\u7684\u5730\u65b9\u5b58\u5728\u4e00\u4e2a 2\u4e2a\u591aG \u7684\u6587\u4ef6\npython -m SimpleHTTPServer 8089\n\n## Client\ncurl http://192.168.56.101:8089/iso.tar --output ./result\n\n# \u6d4b\u8bd5\u5bbd\u5e26\niperf3 -s\niperf3 -c ${serverIP} -t 60 -i 1\n# \u65e0\u989d\u5916\u8bbe\u7f6e\u60c5\u51b5\u4e0b\u5bbd\u5e26\u7ed3\u679c\n\u5927\u6982\u662f 2.69 Gbits/sec = 2860 Mbps\n\n\u5b9e\u9a8c\u7ed3\u679c\u4fe1\u606f\u6c47\u603b\n--\u6b63\u5e38 127 MB/s\n\n--\u5ef6\u65f6 100ms\uff0c5.48 MB/s\nclient \u89d2\u5ea6\u770b\u7684\u8bdd\uff0cserver\u53d1\u7684\u5305\u5927\u5c0f\u4e0d\u7a33\u5b9a\uff0c60000-10000\u90fd\u6709\nserver \u662f\u4ee5\u6bd4\u8f83\u7a33\u5b9a\u7684\u5904\u7406\u5305\uff0c\u7136\u540e\u6709100ms\u7684\u5ef6\u65f6\n\n--\u5ef6\u65f6 100ms \u4e14client \u7684 rmem \u6539\u6210 4096\uff0c17 KB/s\nclient \u89d2\u5ea6\u6765\u770b\uff0c\u5305\u6bd4\u8f83\u4e71\nserver \u89d2\u5ea6\u6765\u8bf4\uff0c\u8fde\u7eed\u5c0f\u5305\uff08\u51e0\u5343\u7684\u6837\u5b50\uff09\u6c47\u603b\u53d1\u9001,\u5305\u7684\u5927\u5c0f\u4f1a\u6709 \u91cd\u590d\u9012\u589e\u7684\u6837\u5b50\n\n--\u5ef6\u65f6 100ms \u4e14server \u7684 wmem \u6539\u6210 4096\uff0c80 KB/s\nclient \u89d2\u5ea6\u6765\u770b\uff0c\u4e00\u4e2aACK\uff0c\u7136\u540e\u4e00\u4e2a\u7a33\u5b9a\u7684\u63a5\u6536 8258 length \u7684\u5305\nserver \u662f\u4ee5\u6bd4\u8f83\u7a33\u5b9a\u7684\u5904\u7406\u5305\uff0c\u7136\u540e\u6709100ms\u7684\u5ef6\u65f6\n\n--\u5ef6\u65f6 10ms \u4e14client \u7684 rmem \u6539\u6210 4096\uff0c17 KB/s\nclient \u89d2\u5ea6\u6765\u770b\uff0c\u5305\u6bd4\u8f83\u4e71\nserver \u89d2\u5ea6\u6765\u8bf4\uff0c\u8fde\u7eed\u5c0f\u5305\uff08\u51e0\u5343\u7684\u6837\u5b50\uff09\u6c47\u603b\u53d1\u9001,\u5305\u7684\u5927\u5c0f\u4f1a\u6709 \u91cd\u590d\u9012\u589e\u7684\u6837\u5b50\n\n\u5b9e\u9a8c\u8bb0\u5f55\n\u5b9e\u9a8c\u4e00\uff1a\u6b63\u5e38\u72b6\u6001\n# Client\ntcpdump -i enp0s8 -n host  ${serverIP} -w client_01.pcap\n# Server\ntcpdump -i enp0s8 -n host  ${clientIP} -w server_01.pcap\n\n# \u4e0b\u8f7d\u7ed3\u679c \u5927\u6982\u5e73\u5747\u4e0b\u8f7d\u901f\u5ea6\u662f 127 MB/s\n$ curl http://192.168.56.101:8089/iso.tar --output ./result_01\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 2539M  100 2539M    0     0   127M      0  0:00:19  0:00:19 --:--:--  130M\n\n\u53ef\u4ee5\u770b\u5230\u622a\u56fe\u91cc\uff0c\u65f6\u95f4\u90fd\u662f\u4ee5 0.000X \u79d2\u9012\u589e\u7684\nclient_01 \u622a\u56fe\n\nserver_01 \u622a\u56fe\n\nTCP  Windows  Scale\nWindow Scale \u9009\u9879\u53ea\u80fd\u4e0e TCP SYN\u3001SYN/ACK \u4e00\u8d77\u4f7f\u7528\u3002TCP \u65e9\u671f\u7684\u65f6\u5019\u5e26\u5bbd\u5f88\u5c0f\uff0c\u6240\u4ee5\u6700\u5927\u63a5\u6536\u7a97\u53e3\u88ab\u5b9a\u4e49\u6210 65535 \u5b57\u8282\uff08 TCP Header \u7684 Windows \u6700\u5927\u4e3a 16 bit \uff09\n\u7531\u4e8e\u4e0d\u591f\u7528\uff0c\u6240\u4ee5\u901a\u8fc7 TCP options \u5b9a\u4e49\u4e86 Windows  Scale\uff0c\u5176\u58f0\u660e\u4e86\u4e00\u4e2a Shift count\uff0c\u4f5c\u4e3a2\u7684\u6307\u6570\uff0c\u518d\u4e58\u4ee5 TCP \u5934\u4e2d\u5b9a\u4e49\u7684\u63a5\u6536\u7a97\u53e3\uff0c\u5c31\u5f97\u5230\u771f\u6b63\u7684 TCP \u63a5\u6536\u7a97\u53e3\u4e86\u3002\n\u4e0b\u56fe\u4e3a SYN/ACK \u4e2d\u53ef\u4ee5\u770b\u5230 Windows  Scale \u4e3a 7\nimage-20230420161433041\n\u4e0b\u56fe\u4e3a\u771f\u5b9e\u7684 Windows size\uff1a29312 = 229 * 128\nimage-20230420161615849\nWindow size\nTCP \u5c42\u7684 Windows size \uff08\u6216\u8005\u5982\u4e0a\u8ff0\u622a\u56fe\u7684 Windows \u3001Calculated windows size\uff09\uff0c\u662f\u5728\u5411\u5bf9\u65b9\u58f0\u660e\u81ea\u5df1\u7684\u63a5\u6536\u7a97\u53e3\uff0c\u800c\u4e0d\u662f\u53d1\u9001\u7a97\u53e3\n\u53d1\u9001\u7a97\u53e3\u51b3\u5b9a\u4e86\u4e00\u53e3\u6c14\u80fd\u53d1\u591a\u5c11\u5b57\u8282\uff0c\u800c MSS \u51b3\u5b9a\u4e86\u8fd9\u4e9b\u5b57\u8282\u8981\u5206\u591a\u5c11\u4e2a\u5305\u53d1\u5b8c\u3002\u81f3\u4e8e\u4e3a\u4ec0\u4e48 MSS=1460 \u7684\u60c5\u51b5\u4e0b\uff0c\u4f46\u662f\u6293\u5305\u7684\u7ed3\u679c\u4ecd\u7136\u6709\u5927\u4e8e\u4ed6\u7684\uff0c\u8fd9\u5c31\u662f\u53e6\u5916\u4e00\u4e2a\u6545\u4e8b\u4e86\uff0c\u5173\u952e\u5b57\uff1aTCP Segment Offload\n\u5b9e\u9a8c\u4e8c\uff1aserver \u589e\u52a0 100ms \u5ef6\u65f6\n# Server\ntc qdisc show dev enp0s8\ntc qdisc del dev enp0s8 root\ntc qdisc add dev enp0s8 root netem delay 100ms\n# Client\ntcpdump -i enp0s8 -n host  ${serverIP} -w client_delay_100ms.pcap\n# Server\ntcpdump -i enp0s8 -n host  ${clientIP} -w server_delay_100ms.pcap\n\n# \u7ed3\u679c\uff0c\u5927\u6982\u5e73\u5747\u4e0b\u8f7d\u901f\u5ea6\u662f 5.48 MB/s\n$ curl http://192.168.56.101:8089/iso.tar --output ./result\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n100 2539M  100 2539M    0     0  5619k      0  0:07:42  0:07:42 --:--:-- 4563k\n\nserver \u6293\u5305\u8be6\u60c5\nimage-20230501160506654\nWireshark \u83dc\u5355\u8def\u5f84\uff1aStatistics &gt;&gt; TCP Stream Graphs &gt;&gt; Time Sequence \uff08Stevens\uff09\nTime Sequence \uff08Stevens\uff09\u56fe\u80fd\u770b\u5230\u4e24\u4e2a\u70b9\u4e4b\u95f4\uff0ctime\u76f8\u51cf\u4e3a 0.1\u79d2\n\n\u6211\u7684\u5b9e\u9a8c\u8fc7\u7a0b\u4e2d\uff0cRound Trip Time Graphs \u770b\u4e0d\u51fa\u6765 rtt \u662f\u56fa\u5b9a 100ms \u7684\u3002\u4f46\u662f\u53ef\u4ee5\u901a\u8fc7\u70b9\u51fb Switch Direction \u6765\u770b\u51fa rtt\nimage-20230501160602666\n\u5b9e\u9a8c\u4e09\uff1aserver \u589e\u52a0 100ms \u5ef6\u65f6\uff0cclient \u4fee\u6539 rmem\n# \u4e24\u8fb9\u539f\u59cb\u503c\nsysctl -w net.ipv4.tcp_wmem=&quot;4096 16384 4194304&quot;\nsysctl -w net.ipv4.tcp_rmem=&quot;4096 87380 6291456&quot;\n# server\ntc qdisc show dev enp0s8\ntc qdisc del dev enp0s8 root\ntc qdisc add dev enp0s8 root netem delay 100ms\n# client\nsysctl -w net.ipv4.tcp_rmem=&quot;4096 4096 4096&quot;\n\n# Client\ntcpdump -i enp0s8 -n host  ${serverIP} -w client_delayServer_100ms_rmem_Client_4096.pcap\n# Server\ntcpdump -i enp0s8 -n host  ${clientIP} -w server_delayServer_100ms_rmem_Client_4096.pcap\n\n# \u7ed3\u679c, \u5927\u6982\u5e73\u5747\u4e0b\u8f7d\u901f\u5ea6\u662f 17 KB/s\n$ curl http://192.168.56.101:8089/iso.tar --output ./result_01\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0 2539M    0 1399k    0     0  14436      0 51:14:22  0:01:39 51:12:43 14458\n\n\u622a\u56fe\u89c1\u5b9e\u9a8c\u4e00\u7ed3\u8bba\n\u5b9e\u9a8c\u56db\uff1aserver \u589e\u52a0 100ms \u5ef6\u65f6\uff0cserver \u4fee\u6539wmem\n# \u4e24\u8fb9\u539f\u59cb\u503c\nsysctl -w net.ipv4.tcp_wmem=&quot;4096 16384 4194304&quot;\nsysctl -w net.ipv4.tcp_rmem=&quot;4096 87380 6291456&quot;\n# Server\ntc qdisc show dev enp0s8\ntc qdisc del dev enp0s8 root\ntc qdisc add dev enp0s8 root netem delay 100ms\nsysctl -w net.ipv4.tcp_wmem=&quot;4096 4096 4096&quot;\n# Client\ntcpdump -i enp0s8 -n host  ${serverIP} -w client_delayServer_100ms_wmem_Server_4096.pcap\n# Server\ntcpdump -i enp0s8 -n host  ${clientIP} -w server_delayServer_100ms_wmem_Server_4096.pcap\n\n# \u7ed3\u679c, \u5927\u6982\u5e73\u5747\u4e0b\u8f7d\u901f\u5ea6\u662f 80 KB/s\n$ curl http://192.168.56.101:8089/iso.tar --output ./result_03\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0 2539M    0 13.3M    0     0  81082      0  9:07:22  0:02:52  9:04:30 81157\n\nimage-20230426200129823\nWindow Scaling \u622a\u56fe\uff0c\u7eff\u7ebf\u540e\u9762\u7a33\u5b9a\u7684\u65f6\u5019\uff0c\u503c\u662f 182272\uff0c\u548c\u6293\u5305\u622a\u56fe\u91cc Client \u7684 win=182272 \u4e5f\u5bf9\u5e94\u7684\u4e0a\uff0cwin \u662f client \u5411\u5bf9\u65b9\u58f0\u660e\u81ea\u5df1\u7684\u63a5\u6536\u7a97\u53e3\u3002\u4ece\u4e0b\u8f7d\u7f51\u901f\u6765\u770b\u4e5f\u5c31\u662f\u867d\u7136 client \u58f0\u660e\u4e86\u81ea\u5df1\u7684\u63a5\u6536\u7a97\u53e3\u5f88\u5927\uff0c\u4f46\u662f server \u7aef\u7684 wmem \u6bd4\u8f83\u5c0f\uff0c\u6240\u4ee5\u7f51\u901f\u4e5f\u4e0d\u5feb\u3002\nimage-20230426193723153\n\u4e00\u4e2a\u7b14\u76f4\u7684\u84dd\u8272\u7ebf \u5bf9\u5e94\u7684\u4ece No 180-182\uff0c\u5bf9\u5e94\u7684\u5927\u5c0f\u4e3a\uff1a2896\u30015792\u30018192\uff0c\u6293\u5305\u89c1\u4e0b\u9762\u622a\u56fe\uff0c\u548c\u6293\u5305\u8be6\u60c5\u622a\u56fe\u7684 Len \u5b57\u6bb5\u4e5f\u5bf9\u5f97\u4e0a\u3002\nwireshark \u7684 Length \u5217 \u51cf\u53bb 66 \uff0c\u5c31\u7b49\u4e8e\u5305\u8be6\u60c5\u91cc\u7684 Len\uff0c\u81f3\u4e8e\u4e3a\u4ec0\u4e48\u662f 66 \u4e0d\u592a\u6e05\u695a\uff0c\u4f46\u662f\u53ef\u4ee5\u4ece ACK \u54cd\u5e94\u662f 66 \u8f85\u52a9\u786e\u8ba4\u3002\nimage-20230426195023142\n\u5b9e\u9a8c\u4e94\uff1aserver \u589e\u52a0 10ms \u5ef6\u65f6\uff0cclient \u4fee\u6539 rmem\n# \u4e24\u8fb9\u539f\u59cb\u503c\nsysctl -w net.ipv4.tcp_wmem=&quot;4096 16384 4194304&quot;\nsysctl -w net.ipv4.tcp_rmem=&quot;4096 87380 6291456&quot;\n# Server\ntc qdisc show dev enp0s8\ntc qdisc del dev enp0s8 root\ntc qdisc add dev enp0s8 root netem delay 10ms\n# client\nsysctl -w net.ipv4.tcp_rmem=&quot;4096 4096 4096&quot;\n\n# Client\ntcpdump -i enp0s8 -n host  ${serverIP} -w client_delayServer_10ms_rmem_Client_4096.pcap\n# Server\ntcpdump -i enp0s8 -n host  ${clientIP} -w server_delayServer_10ms_rmem_Client_4096.pcap\n\n# \u7ed3\u679c, \u5927\u6982\u5e73\u5747\u4e0b\u8f7d\u901f\u5ea6\u662f 123 KB/s\n$ curl http://192.168.56.101:8089/iso.tar --output ./result_01\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                 Dload  Upload   Total   Spent    Left  Speed\n  0 2539M    0 20.6M    0     0   123k      0  5:50:08  0:02:50  5:47:18  123k\n\n\u89c1 \u7ed3\u8bba\u4e8c \u622a\u56fe\n\u5b9e\u9a8c\u516d\uff1acurl \u589e\u52a0\u901f\u5ea6\u63a7\u5236\n# client &amp; server \u4fdd\u6301\u9ed8\u8ba4\u503c\u4e0d\u52a8\uff0c\u9650\u901f\u8bbe\u7f6e\u5c0f\u4e00\u70b9\uff0c\u6293\u5305\u5206\u6790\u66f4\u597d\u4e00\u70b9\uff0c\u5206\u522b\u5c1d\u8bd5\u4e861k\u3001100k\u30011M\ncurl --limit-rate 1k http://192.168.56.101:8089/iso.tar --output ./result_04\n\n# Client\ntcpdump -i enp0s8 -n host  ${serverIP} -w client_curl_1k.pcap\n# Server\ntcpdump -i enp0s8 -n host  ${clientIP} -w server_curl_1k.pcap\n\nTCP Window Full \u610f\u5473\u7740\u7a97\u53e3\u586b\u6ee1\uff0c\u53ef\u4ee5\u770b\u4e0b\u8fd9\u7bc7\u6587\u7ae0\uff0c\u8bf4\u7684\u5f88\u8be6\u7ec6\uff1aAnalyse Slow Networks with TCP Zero Window\nimage-20230427171447952\n\u7ed3\u8bba\n\u7ed3\u8bba\u4e00\uff1a\u6539\u5c0f client rmem \u548c server wmem \u6765\u5bf9\u6bd4\u5bf9\u901f\u5ea6\u7684\u5f71\u54cd\n\u5b9e\u9a8c\u4e09 \u548c \u5b9e\u9a8c\u56db\uff1a\u5e73\u5747\u4e0b\u8f7d\u901f\u5ea6\u4e3a\uff1a17 KB/s \u548c 80 KB/s \u7684\u5bf9\u6bd4\n\u76f8\u6bd4\u800c\u8a00\uff0cserver \u6539\u5c0f\u4e86 wmen \u901f\u5ea6\u8fd8\u51d1\u5408\uff0c\u56e0\u4e3aserver \u6bcf\u6b21\u6536\u5230ack\uff0c\u7acb\u5373\u91ca\u653e wmem \u6765\u53d1\u65b0\u7684\u7f51\u7edc\u5305 (\u5185\u5b58\u7ea7\u522b\u7684\u65f6\u5ef6)\uff1b\n\u5982\u679c client \u7684 rmem \u6bd4\u8f83\u5c0f\uff0c\u5f53 rmem \u6ee1\u4e86\u5230\u5e94\u7528\u8bfb\u8d70 rmem\uff0crmem \u6709\u7a7a\u95f2\u540e\u9700\u8981 rtt \u65f6\u95f4\u53cd\u9988\u5230 server \u7aef\uff0cserver \u7aef\u624d\u4f1a\u7ee7\u7eed\u53d1\u5305\u3002\uff08\u7f51\u7edc\u7ea7\u65f6\u5ef6\u6bd4\u5185\u5b58\u7ea7\u65f6\u5ef6\u9ad8\u51e0\u4e2a\u6570\u91cf\u7ea7\uff09\n\u4e00\u53e5\u8bdd\u603b\u7ed3\uff1a\u5c31\u662f rmem \u4ece\u6709\u7a7a\u5230\u5305\u8fdb\u6765\u4f1a\u6709\u5f88\u5927\u7684\u95f4\u9694 (rtt) , wmem \u6709\u7a7a\u5230\u5199\u5305\u8fdb\u6765\u6ca1\u6709\u65f6\u5ef6\u3002\nplantegg \u4efb\u603b\u7684\u8fd9\u5f20\u56fe\u53cd\u590d\u770b\uff0c\u80fd\u6709\u70b9\u7406\u89e3\u4e86\n\n\u65f6\u95f4\u6bd4\u8f83\n\n\u5206\u6790 \u5b9e\u9a8c\u4e09\u548c\u5b9e\u9a8c\u56db\u4e2d server \u7aef\u6293\u5305\u7684\u7ed3\u679c\uff1a\n\u5b9e\u9a8c\u4e09 rmen \u7684\u622a\u56fe\uff0c\u4ece No 15 \u5f00\u59cb\u770b\uff0c\u5dee\u4e0d\u591a\u662f server &gt; client\uff0c\u3010TCP Window Full \u8fc7\u4f1a\u770b\u3011\u7136\u540e No 17 \u4e2d\uff0cclient &gt; server ACK \u56de\u590d\uff0c\u7136\u540e\u8fc7\u4e86 0.1 \u79d2\uff0cNo 18 \u53c8\u5f00\u59cb\u53d1\u9001\u7ed9 client \u4e86\u3002\n\u800c\u4e14 TCP Window Full \u5f88\u9891\u7e41\uff0c\u7a97\u53e3\u88ab\u586b\u6ee1\u4e86\uff0c\u6240\u4ee5\u4e0b\u8f7d\u7684\u901f\u5ea6\u5f88\u6162\u3002\u622a\u56fe\u91cc\u80fd\u770b\u5230 client \u7684 win=1460\u3002\n\u7b80\u5355\u6309\u7167\u6b65\u9aa4\u63cf\u8ff0\u4e0b\u8fc7\u7a0b\n1\u3001No 11: client \u8868\u793a\u6211\u7684\u63a5\u6536\u7a97\u53e3\u4e3a 1460\n2\u3001No 12: server \u8868\u793a\u6211\u7684\u63a5\u6536\u7a97\u53e3\u4e3a 29056\uff0c\u4ee5\u53ca\u53d1\u9001\u4e86 730 \u957f\u5ea6\u7684\u5305\n3\u3001No 13: server \u7ee7\u7eed\u53d1\u9001\u4e86 730 \u957f\u5ea6\u7684\u5305\uff0c\u7531\u4e8e 730 + 730 \u7b49\u4e8e client \u7684\u63a5\u6536\u7a97\u53e3 1460\uff0c\u6240\u4ee5\u63d0\u793a TCP WIndow Full\n4\u3001No 14: client \u7ee7\u7eed\u8bf4\u6211\u7684\u63a5\u6536\u7a97\u53e3\u4e3a 1460\n\n\u5b9e\u9a8c\u56db wmen \u7684\u622a\u56fe\uff0cserver \u51e0\u4e2a\u5305\u53d1\u7ed9 client\uff0c\u7136\u540e client ack \u56de\u590d\uff0c\u53cd\u590d\u8be5\u8fc7\u7a0b\uff0c\u5305\u7684\u53d1\u9001\u6bd4\u8f83\u5e73\u7a33\n\n\u7ed3\u8bba\u4e8c\uff1armem \u6539\u5c0f\uff0c\u67e5\u770b \u8c03\u6574 rrt \u540e\u6765\u5bf9\u6bd4\u901f\u5ea6\n\u5b9e\u9a8c\u4e09 \u548c \u5b9e\u9a8c\u4e94 \u90fd\u662f\u4fee\u6539 client rmen = 4096\uff0c\u53ea\u662f\u4e00\u4e2a\u662f server \u7aef\u8bbe\u7f6e\u4e86 100ms \u548c 10ms \u5ef6\u65f6\uff0c\u4f46\u662f\u7ed3\u679c\u662f 17 KB/s \u548c 123 KB/s \u7684\u5dee\u8ddd\u3002\nrrt \u589e\u5927\u4e86\uff0c\u4e0b\u8f7d\u901f\u5ea6\u4f1a\u4e0b\u964d\u3002\u4e0b\u9762\u4e24\u4e2a\u622a\u56fe\uff0c10ms \u7684 window Scaling \u548c Throughput \u90fd\u8981\u6bd4 100ms \u7684\u5bc6\u96c6\n\n\nplantegg \u4efb\u603b\u7684\u8fd9\u5f20\u56fe\u53cd\u590d\u770b\u3010\u7ed3\u8bba\u4e8c\u7684\u53ea\u9700\u8981\u770b\u56fe\u7247\u5de6\u8fb9\u5373\u53ef\u3011\uff0c\u80fd\u6709\u70b9\u7406\u89e3\u4e86\n\u5ef6\u65f6\u589e\u52a0\u4e86\uff0c\u90a3\u8bf4\u660e\u94fe\u8def\u4e0a\u7684\u5305\u4e5f\u591a\u4e86\uff0cclient \u63a5\u6536\u5305\u7684\u901f\u5ea6\u6162\u4e86\uff0c\u90a3\u81ea\u7136\u4e0b\u8f7d\u901f\u5ea6\u53d8\u6162\u3002\nrmem_rtt\n\u7ed3\u8bba\u4e09\uff1a\u6c47\u603b\uff1a\u7f51\u901f\u548c wmem rmem rtt \u5e26\u5bbd \u7684\u5173\u7cfb\n\u51cf\u5c11 rtt \u548c \u589e\u5927\u5e26\u5bbd \u5f71\u54cd\u5e26\u5bbd\u5c31\u4e0d\u8bf4\u4e86\u3002\nclient \u7684 recv buffer \u592a\u5c0f \u4e14 rtt \u5f88\u5927\u7684\u60c5\u51b5\u4e0b\uff0c\u7f51\u901f\u4f1a\u53d8\u6162\u3002\n\u589e\u52a0 server \u7684 send buffer \uff08\u5bf9\u5e94 wmem\uff09\uff0c\u76f8\u5f53\u4e8e\u4ed3\u5e93\u53d1\u8d27\u6bd4\u8f83\u5f3a\n\u589e\u52a0 client \u7684 recv buffer \uff08\u5bf9\u5e94 rmem\uff09\uff0c\u76f8\u5f53\u4e8e\u4ed3\u5e93\u6536\u83b7\u6bd4\u8f83\u5f3a\nss \u8ba1\u7b97 tcp buffer size\nman ss \u94fe\u63a5\n# \u6ce8\u610f\u4e0b\uff0ctb \u8868\u793a snd_buf\uff0c\u5b57\u6bcd t \u53ef\u4ee5\u7406\u89e3\u4e3a Transmit\n       -m, --memory\n              Show socket memory usage. The output format is:\n\n              skmem:(r&lt;rmem_alloc&gt;,rb&lt;rcv_buf&gt;,t&lt;wmem_alloc&gt;,tb&lt;snd_buf&gt;,\n                            f&lt;fwd_alloc&gt;,w&lt;wmem_queued&gt;,o&lt;opt_mem&gt;,\n                            bl&lt;back_log&gt;,d&lt;sock_drop&gt;)\n\n\u5f85\u529e\nBDP\n\u4e22\u5931\u7387\n\u53c2\u8003\u94fe\u63a5\nAnalyse Slow Networks with TCP Zero Window\nTCP\u6027\u80fd\u548c\u53d1\u9001\u63a5\u6536\u7a97\u53e3\u3001Buffer\u7684\u5173\u7cfb\n\u957f\u80a5\u7ba1\u9053(LFT)\u4e2dTCP\u7684\u8270\u96be\u5904\u5883\u4e0e\u6253\u6cd5\nWhy Your Application only Uses 10Mbps Even the Link is 1Gbps?\nTCP Throughput Calculator\n", "categories": [{"name": "Maverick", "slug": "Maverick", "permalink": "/Blog-With-GitHub-Boilerplate/category/Maverick/"}], "tags": [{"name": "TCP", "slug": "TCP", "permalink": "/Blog-With-GitHub-Boilerplate/tag/TCP/"}]}, {"title": "TCP\u534a\u8fde\u63a5\u548c\u5168\u8fde\u63a5\u961f\u5217", "date": "2023-03-28T14:50:00-00.00", "path": "/Blog-With-GitHub-Boilerplate/archives/TCP/", "text": "\u539f\u59cb\u6587\u6863\u4e3a\u4ee5\u4e0b\u4e09\u7bc7\uff0c\u6839\u636e\u76f8\u5173\u6587\u6863\u8fdb\u884c\u7684\u6574\u7406\u3002\n\u4ece\u4e00\u6b21\u7ebf\u4e0a\u95ee\u9898\u8bf4\u8d77\uff0c\u8be6\u89e3 TCP \u534a\u8fde\u63a5\u961f\u5217\u3001\u5168\u8fde\u63a5\u961f\u5217\nTCP \u534a\u8fde\u63a5\u961f\u5217\u548c\u5168\u8fde\u63a5\u961f\u5217\n\u8be6\u89e3 TCP \u534a\u8fde\u63a5\u961f\u5217\u4e0e\u5168\u8fde\u63a5\u961f\u5217\n\u53e6\u5916\uff0cLinux \u6e90\u7801\u8bf7\u770b https://elixir.bootlin.com/linux/v3.10/source \uff0c\u53ef\u4ee5\u5feb\u901f\u8df3\u8f6c\u3002\n\u5168\u8fde\u63a5\u4ee5\u53ca\u4e0d\u5f00\u542fcookie\u7684\u534a\u8fde\u63a5\uff0cLinux 3.10.0 \u7684\u7ed3\u679c\u80fd\u5206\u6790\u51fa\u6765\uff0c\u4f46\u662f\u5f00\u4e86cookie\u7684\u534a\u8fde\u63a5\uff0c\u8bd5\u9a8c\u6570\u636e\u4e00\u76f4\u5bf9\u4e0d\u4e0a\u3002\n\u7531\u4e8e C \u8bed\u8a00 \u5df2\u7ecf\u5fd8\u8bb0\u4e86\uff0cC \u8bed\u8a00\u6e90\u7801\u5206\u6790\u662f\u5728\u5f15\u7528\u94fe\u63a5\u7ed3\u5408 Chatgpt \u8fdb\u884c\u5206\u6790\u7406\u89e3\u7684\uff0c\u90e8\u5206\u5b9e\u5728\u5206\u6790\u4e0d\u4e86\uff0c\u62fe\u4eba\u7259\u6167\u3002\n1\u3001\u57fa\u7840\u4fe1\u606f\n1.1\u3001\u670d\u52a1\u7aef\u548c\u5ba2\u6237\u7aef\u4fe1\u606f\n\u672c\u8bd5\u9a8c\u7684 Linux \u5185\u6838\u7248\u672c\uff1a3.10.0\uff0c\u4ee5\u4e0b\u5747\u662f\u57fa\u4e8e\u6b64\u5206\u6790\u3002\n1.2\u3001ss \u547d\u4ee4\nss \u5229\u7528\u5230\u4e86 TCP \u534f\u8bae\u6808\u4e2d\u7684 tcp_diag\uff08\u89c1 1.4 \u7684\u5206\u6790\uff09\u3002tcp_diag \u662f\u4e00\u4e2a\u7528\u4e8e\u5206\u6790\u7edf\u8ba1\u7684\u6a21\u5757\uff0c\u53ef\u4ee5\u83b7\u5f97 Linux \u5185\u6838\u4e2d\u7b2c\u4e00\u624b\u7684\u4fe1\u606f\uff0c\u8fd9\u5c31\u786e\u4fdd\u4e86 ss \u7684\u5feb\u6377\u9ad8\u6548\u3002\u5f53\u7136\uff0c\u5982\u679c\u4f60\u7684\u7cfb\u7edf\u4e2d\u6ca1\u6709 tcp_diag\uff0css \u4e5f\u53ef\u4ee5\u6b63\u5e38\u8fd0\u884c\uff0c\u53ea\u662f\u6548\u7387\u4f1a\u53d8\u5f97\u7a0d\u6162\u3002\n\u5728\u300cLISTEN \u72b6\u6001\u300d\u65f6\uff0cRecv-Q/Send-Q \u8868\u793a\u7684\u542b\u4e49\u5982\u4e0b\uff1a\n\nRecv-Q\uff1a\u5f53\u524d\u5168\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662f\u5f53\u524d\u5df2\u5b8c\u6210\u4e09\u6b21\u63e1\u624b\u5e76\u7b49\u5f85\u670d\u52a1\u7aef accept() \u7684 TCP \u8fde\u63a5\uff1b\n\nSend-Q\uff1a\u5f53\u524d\u5168\u8fde\u63a5\u6700\u5927\u961f\u5217\u957f\u5ea6\uff0c\u4e0b\u9762\u7684\u8f93\u51fa\u7ed3\u679c\u8bf4\u660e\u76d1\u542c 8088 \u7aef\u53e3\u7684 TCP \u670d\u52a1\uff0c\u6700\u5927\u5168\u8fde\u63a5\u957f\u5ea6\u4e3a 128\uff1b\n\n\n# -l , --listening \u663e\u793a\u76d1\u542c\u72b6\u6001\u7684\u5957\u63a5\u5b57\uff08sockets\uff09\n# -n , --numeric   \u4e0d\u89e3\u6790\u670d\u52a1\u540d\u79f0\n# -t , --tcp       \u4ec5\u663e\u793a TCP\u5957\u63a5\u5b57\uff08sockets\uff09\n$ ss -lnt\nState       Recv-Q Send-Q            Local Address:Port                           Peer Address:Port\nLISTEN      6      128                        [::]:8888                                   [::]:*\n\n\u5728\u300c\u975e LISTEN \u72b6\u6001\u300d\u65f6\uff0cRecv-Q/Send-Q \u8868\u793a\u7684\u542b\u4e49\u5982\u4e0b\uff1a\n\nRecv-Q\uff1a\u5df2\u6536\u5230\u4f46\u672a\u88ab\u5e94\u7528\u8fdb\u7a0b\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff1b\nSend-Q\uff1a\u5df2\u53d1\u9001\u4f46\u672a\u6536\u5230\u786e\u8ba4\u7684\u5b57\u8282\u6570\uff1b\n\n# -n , --numeric   \u4e0d\u89e3\u6790\u670d\u52a1\u540d\u79f0\n# -t , --tcp       \u4ec5\u663e\u793a TCP\u5957\u63a5\u5b57\uff08sockets\uff09\n$ ss -nt\nState       Recv-Q Send-Q            Local Address:Port                           Peer Address:Port\nESTAB       0      36               192.168.56.101:22                             192.168.56.1:12656\nCLOSE-WAIT  12     0       [::ffff:192.168.56.101]:8888                [::ffff:192.168.56.100]:34204\n\n1.3\u3001netstat \u547d\u4ee4\n\u901a\u8fc7 netstat -s \u547d\u4ee4\u53ef\u4ee5\u67e5\u770b TCP \u534a\u8fde\u63a5\u961f\u5217\u3001\u5168\u8fde\u63a5\u961f\u5217\u7684\u6ea2\u51fa\u60c5\u51b5\n\u4e0b\u9762\u8f93\u51fa\u7684\u6570\u503c\u662f\u7d2f\u8ba1\u503c\uff0c\u5206\u522b\u8868\u793a\u6709\u591a\u5c11 TCP socket \u94fe\u63a5\u56e0\u4e3a\u5168\u8fde\u63a5\u961f\u5217\u3001\u534a\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\u800c\u88ab\u4e22\u5f03\n\u6ce8\u610f times \u662f\u6b21\u6570\uff0c\u4e0d\u662f\u65f6\u95f4\u7684\u610f\u601d\u3002\n\u5728\u6392\u67e5\u7ebf\u4e0a\u95ee\u9898\u65f6\uff0c\u5982\u679c\u4e00\u6bb5\u65f6\u95f4\u5185\u76f8\u5173\u6570\u503c\u4e00\u76f4\u5728\u4e0a\u5347\uff0c\u5219\u8868\u660e\u534a\u8fde\u63a5\u961f\u5217\u3001\u5168\u8fde\u63a5\u961f\u5217\u6709\u6ea2\u51fa\u60c5\u51b5\n$ netstat -s |grep -i listen\n    911 times the listen queue of a socket overflowed\n    911 SYNs to LISTEN sockets dropped\n\n1.4\u3001tcp_diag.c  \u5206\u6790\n\u4e0d\u540c\u5185\u6838\u7248\u672c\u7684 tcp_diag.c \u7684\u4ee3\u7801\u662f\u4e0d\u4e00\u6837\u7684\uff0c\u672c\u8bd5\u9a8c\u7684 Linux \u5185\u6838\u7248\u672c\uff1a3.10.0\nss \u547d\u4ee4\u83b7\u53d6\u7684 Recv-Q/Send-Q \u5728\u300cLISTEN \u72b6\u6001\u300d\u548c\u300c\u975e LISTEN \u72b6\u6001\u300d\u6240\u8868\u8fbe\u7684\u542b\u4e49\u662f\u4e0d\u540c\u7684\uff0c\u89c13.10.0\u7684\u5185\u6838\u4ee3\u7801\u3002\n// https://elixir.bootlin.com/linux/v3.10/source/net/ipv4/tcp_diag.c\nstatic void tcp_diag_get_info(struct sock *sk, struct inet_diag_msg *r,\n                  void *_info)\n{\n    const struct tcp_sock *tp = tcp_sk(sk);\n    struct tcp_info *info = _info;\n    // \u5982\u679c TCP \u8fde\u63a5\u72b6\u6001\u662f LISTEN \u65f6\n    if (sk-&gt;sk_state == TCP_LISTEN) {\n        // \u5f53\u524d\u5168\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\n        r-&gt;idiag_rqueue = sk-&gt;sk_ack_backlog;\n        // \u5f53\u524d\u5168\u8fde\u63a5\u7684\u6700\u5927\u961f\u5217\u957f\u5ea6\n        r-&gt;idiag_wqueue = sk-&gt;sk_max_ack_backlog;\n    }\n    // \u5982\u679c TCP \u8fde\u63a5\u72b6\u6001\u4e0d\u662f LISTEN \u65f6\n    else {\n        // \u5df2\u6536\u5230\u4f46\u672a\u88ab\u5e94\u7528\u8fdb\u7a0b\u8bfb\u53d6\u7684\u5b57\u8282\u6570\n        r-&gt;idiag_rqueue = max_t(int, tp-&gt;rcv_nxt - tp-&gt;copied_seq, 0);\n        // \u5df2\u53d1\u9001\u4f46\u672a\u6536\u5230\u786e\u8ba4\u7684\u5b57\u8282\u6570\n        r-&gt;idiag_wqueue = tp-&gt;write_seq - tp-&gt;snd_una;\n    }\n    if (info != NULL)\n        tcp_get_info(sk, info);\n}\n\n1.5\u3001Accept Queue\uff1a\u5168\u8fde\u63a5\u961f\u5217\u7684\u7ed3\u8bba\nAccept Queue\uff1a\u5168\u8fde\u63a5\u961f\u5217\n\u6700\u5927\u961f\u5217\u4e3a\uff1amin(backlog, net.core.somaxconn)\n\u6821\u9a8c Accept Queue \u662f\u5426\u6ee1\u7684\u903b\u8f91\u5982\u4e0b\uff08 \u6ce8\u610f\u5927\u4e8e\u53f7\u624d\u8fd4\u56deture\uff0c\u5373\u6700\u7ec8\u53ef\u5b58\u50a8 socket \u6570\u76ee\u4f1a\u52a01\uff09\uff1a\nreturn sk-&gt;sk_ack_backlog &gt; sk-&gt;sk_max_ack_backlog\n1.6\u3001SYN Queue\uff1a\u534a\u8fde\u63a5\u961f\u5217\u7684\u7ed3\u8bba\n\u534a\u8fde\u63a5\u7684\u903b\u8f91\u6bd4\u8f83\u590d\u6742\uff0c\u7b97\u51fa\u6700\u5927\u8fde\u63a5\u540e\uff0c\u8fd8\u6709\u5176\u4ed6\u903b\u8f91\u8fdb\u884c\u5224\u65ad\u3002\u5b9e\u9645\u6d4b\u8bd5\u4e0b\u6765\u7684\u60c5\u51b5\uff0c\u4e0d\u5f00\u542f cookie \u7684\u7ed3\u679c\u548c\u7ed3\u8bba\u80fd\u5bf9\u7684\u4e0a\uff0c\u4f46\u662f\u5f00\u542f cookie \u540e\uff0c\u6d4b\u8bd5\u7684\u7ed3\u679c\u5bf9\u4e0d\u4e0a\u3010\u4ee5\u540e\u518d\u8fdb\u884c\u5206\u6790\uff0c\u76ee\u524d\u4e00\u76f4\u65e0\u6cd5\u6d4b\u8bd5\u5230\u7ed3\u679c\u3011\n\u4e0d\u5f00\u542fcookie\u7684\u7ed3\u8bba\u5982\u4e0b\n1\u3001\u534a\u8fde\u63a5\u6700\u5927\u8fde\u63a5 &gt; 0.75*tcp_max_syn_backlog\uff0c\u5219 Drop SYN\u4e34\u754c\u503c\u4e3a 0.75*tcp_max_syn_backlog +1\u3010+1\u662f\u56e0\u4e3a\u5224\u65ad\u6761\u4ef6\u662f\u5927\u4e8e\u53f7\uff0c\u53e6\u59160.75\u4e58\u6cd5\u540e\u7684\u7ed3\u679c\u4e0d\u786e\u5b9a\u662f\u5426\u662f\u56db\u820d\u4e94\u5165\u8fd8\u662f\u5411\u4e0a\u53d6\u6574\uff0c\u4f46\u662f\u4ece\u5b9e\u9645\u7ed3\u679c\u6765\u770b\u5c0f\u70b9\u6570\u5982\u679c\u662f 0.5 \u7ed3\u679c\u662f\u6309\u7167 1 \u6765\u8ba1\u7b97\u3011\n2\u3001\u534a\u8fde\u63a5\u6700\u5927\u8fde\u63a5 &lt;= 0.75*tcp_max_syn_backlog\uff0c\u5219 Drop SYN\u4e34\u754c\u503c\u4e3a \u534a\u8fde\u63a5\u6700\u5927\u8fde\u63a5\n\u3010tcp_v4_conn_request \u51fd\u6570\u7684\u7b2c\u4e09\u5904\u5224\u65ad\uff0c\u6309\u7167\u4ee3\u7801\u5224\u65ad \u7b49\u4e8e\u53f7 \u5e94\u662f\u4e0a\u8ff0 2 \u7684\u7ed3\u8bba\uff0c\u4f46\u662f\u7531\u4e8e \u6d4b\u8bd5\u4e2d\u7684 256\u9664\u4ee50.75 \u4e0d\u662f\u6574\u6570\uff0c\u65e0\u6cd5\u8fdb\u4e00\u6b65\u786e\u8ba4\u7b49\u4e8e\u53f7 =\u3011\n\u5f00\u542fcookie\u7684\u7ed3\u8bba\u5982\u4e0b\uff1a\n\u6309\u7167\u7f51\u4e0a\u8bf4\u7684\uff0c\u5e94\u662f\u5f53\u534a\u8fde\u63a5\u961f\u5217\u957f\u5ea6 &gt; \u5168\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\u65f6\uff0c\u5c31\u4f1a\u89e6\u53d1 DROP SYN \u8bf7\u6c42\u3002\u4f46\u662f\u76ee\u524d\u6211\u6d4b\u8bd5\u4e0b\u6765\uff0cSYN_RECV \u7684\u6570\u91cf\u65e0\u6cd5\u8fbe\u5230\u4e0a\u9650\uff0c\u65e0\u6cd5\u9a8c\u8bc1\u7ed3\u679c\u3002\u3010\u540e\u7eed\u518d\u7814\u7a76\uff0c\u76ee\u524d\u6d4b\u8bd5\u4e00\u76f4\u65e0\u6cd5\u5f97\u51fa\u5565\u7ed3\u8bba\u3011\n1.6.1\u3001\u534a\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\u63a7\u5236\n\u7531\u4e8eC\u8bed\u8a00\u5df2\u5fd8\u8bb0\uff0c\u8ba1\u7b97\u516c\u5f0f\u65e0\u6cd5\u786e\u8ba4\uff0c\u4ee5\u4e0b\u4fe1\u606f\u4e3a\u501f\u9274\u3002\n\u5f88\u591a\u535a\u6587\u4e2d\u8bf4\u534a\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\u7531 /proc/sys/net/ipv4/tcp_max_syn_backlog \u53c2\u6570\u6307\u5b9a\uff0c\u5b9e\u9645\u4e0a\u53ea\u6709\u5728 linux \u5185\u6838\u7248\u672c\u5c0f\u4e8e 2.6.20 \u65f6\uff0c\u534a\u8fde\u63a5\u961f\u5217\u624d\u7b49\u4e8e backlog \u7684\u5927\u5c0f\u3002\n// max_qlen_log - log_2 of maximal queued SYNs/REQUESTs\n// \u4e5f\u5c31\u662f\u8bf4 \u6700\u5927\u534a\u8fde\u63a5\u961f\u5217 \u7b49\u4e8e 2 \u7684 max_qlen_log \u6b21\u65b9\nnr_table_entries = min_t(u32, nr_table_entries, sysctl_max_syn_backlog);\nnr_table_entries = max_t(u32, nr_table_entries, 8);\nnr_table_entries = roundup_pow_of_two(nr_table_entries + 1);\n//\u5411\u4e0a\u53d6\u6ee1\u8db32\u7684\u6307\u6570\u500d\u7684\u6574\u6570\n\nfor (lopt-&gt;max_qlen_log = 3;\n     (1 &lt;&lt; lopt-&gt;max_qlen_log) &lt; nr_table_entries;\n     lopt-&gt;max_qlen_log++);\n\n//\u5927\u4f53\u8ba1\u7b97\u8fc7\u7a0b\u5982\u4e0b\nbacklog = min(somaxconn, backlog)\nnr_table_entries = backlog\nnr_table_entries = min(backlog, sysctl_max_syn_backlog)\nnr_table_entries = max(nr_table_entries, 8)\n// roundup_pow_of_two: \u5c06\u53c2\u6570\u5411\u4e0a\u53d6\u6574\u5230\u6700\u5c0f\u7684 2^n\n// \u6ce8\u610f\u8fd9\u91cc\u5b58\u5728\u4e00\u4e2a +1\nnr_table_entries = roundup_pow_of_two(nr_table_entries + 1)\nmax_qlen_log = max(3, log2(nr_table_entries))\nmax_queue_length = 2^max_qlen_log\n\nsysctl_max_syn_backlog \u5373\u5185\u6838\u53c2\u6570 net.ipv4.tcp_max_syn_backlog \uff083.10.0 \u4ee3\u7801\u9ed8\u8ba4\u503c\u662f256\uff0c\u4f46\u662f\u7cfb\u7edf\u53c2\u6570\u662f128\uff09\n2^max_qlen_log^ \u4e5f\u5c31\u662f\u6700\u5927\u60c5\u51b5\u4e3a 2^log2{nr_table_entries}^ ,\u4e5f\u5c31\u662f nr_table_entries \u7684\u503c\uff1b\u6700\u5c0f\u4e3a 8\n\u6709\u4e00\u70b9\u7ed5\uff0c\u4e0d\u8fc7\u8fd0\u7b97\u90fd\u5f88\u7b80\u5355\uff0c\u534a\u8fde\u63a5\u961f\u5217\u7684\u957f\u5ea6\u5b9e\u9645\u4e0a\u7531\u4e09\u4e2a\u53c2\u6570\u51b3\u5b9a\n\nlisten \u65f6\u4f20\u5165\u7684 backlog\n/proc/sys/net/ipv4/tcp_max_syn_backlog\n/proc/sys/net/core/somaxconn\n\n# \u76f8\u5173\u64cd\u4f5c\u547d\u4ee4\n# backlog\uff0c\u7528\u7684 Golang \u6d4b\u8bd5\uff0c\u5728 Golang \u4e2d\uff0clisten \u7684 backlog \u53c2\u6570\u4f7f\u7528\u7684\u662f /proc/sys/net/core/somaxconn \u6587\u6863\u4e2d\u7684\u503c\nsudo sysctl -w net.core.somaxconn=128\nsudo sysctl -w net.ipv4.tcp_max_syn_backlog=512\nsudo sysctl -w net.ipv4.tcp_syncookies=1\n\n1.6.2\u3001\u5224\u65ad\u662f\u5426 Drop SYN \u8bf7\u6c42\n\u5f53 Client \u7aef\u5411 Server \u7aef\u53d1\u9001 SYN \u62a5\u6587\u540e\uff0cServer \u7aef\u4f1a\u5c06\u8be5 socket \u8fde\u63a5\u5b58\u50a8\u5230\u534a\u8fde\u63a5\u961f\u5217(SYN Queue)\uff0c\u5982\u679c Server \u7aef\u5224\u65ad\u534a\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\u5219\u4f1a\u5c06\u8fde\u63a5 Drop \u4e22\u5f03\u3002\n\u90a3\u4e48 Server \u7aef\u662f\u5982\u4f55\u5224\u65ad\u534a\u8fde\u63a5\u961f\u5217\u662f\u5426\u6ee1\u7684\u5462\uff1f\u9664\u4e86\u4e0a\u9762\u4e00\u5c0f\u8282\u63d0\u5230\u7684\u534a\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\u63a7\u5236\u5916\uff0c\u8fd8\u548c /proc/sys/net/ipv4/tcp_syncookies \u53c2\u6570\u6709\u5173\u3002(tcp_syncookies \u7684\u4f5c\u7528\u662f\u4e3a\u4e86\u9632\u6b62 SYN Flood \u653b\u51fb\u7684)\n\n\u6ce8\u610f\uff1a\u7b2c\u4e00\u4e2a\u5224\u65ad\u6761\u4ef6 \u300c\u5f53\u524d\u534a\u8fde\u63a5\u961f\u5217\u662f\u5426\u5df2\u8d85\u8fc7\u534a\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\u300d\u5728\u4e0d\u540c\u5185\u6838\u7248\u672c\u4e2d\u7684\u5224\u65ad\u4e0d\u4e00\u6837\uff0c\u5f15\u7528\u6587\u7ae0\u7684 Linux 4.19.91 \u5185\u6838\u5224\u65ad\u7684\u662f\u5f53\u524d\u534a\u8fde\u63a5\u961f\u5217\u957f\u5ea6\u662f\u5426 &gt;= \u5168\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\uff0c\u4f46\u662f\u672c\u6587\u5b9e\u9a8c\u7684 Linux 3.10.0 \u6b63\u597d\u6ee1\u8db3\u8be5\u622a\u56fe\n\u5b9e\u9645\u6d4b\u8bd5\u7684\u7ed3\u679c\u5982\u4e0b\uff0c\u6309\u7167cookie\u662f\u5426\u5f00\u542f\u8fdb\u884c\u6d4b\u8bd5\u9a8c\u8bc1\u3002\nGoogle \u8868\u683c\u94fe\u63a5 \uff1aSheet\u91cc\u9762\u5df2\u7ecf\u5199\u597d\u4e86\u90e8\u5206\u8ba1\u7b97\u516c\u5f0f\n\u6ca1\u5f00\u542fcookie\u7684\u7ed3\u679c\u5982\u4e0b\uff1a\nLinux 3.10.0 \u7684\u6d4b\u8bd5\u7ed3\u679c\u5982\u4e0b\uff1a\n\u5b57\u6bb5 a = max(min(backlog,somaxconn,sysctl_max_sys_backlog),8)\n\u534a\u961f\u5217\u6700\u5927\u957f\u5ea6\u7b49\u4e8e roundup_pow_of_two(a+1)\n\u7531\u4e8e\u662f Golang \u6d4b\u8bd5\uff0cbacklog \u7b49\u4e8e somaxconn\n\n\nsomaxconn\ntcp_max_syn_backlog\ntcp_max_syn_backlog * 0.75\na\n\u534a\u961f\u5217Max\n\u5168\u961f\u5217Max\nDrop SYN \u4e34\u754c\u503c\n\n\n\n\n1024\n128\n96\n128\n256\n1024\n96+1=97\n\n\n128\n118\n88.5\n118\n128\n128\n88.5+1=90\n\n\n128\n108\n81\n108\n128\n128\n81+1=82\n\n\n3\n2\n1.5\n8\n16\n3\n1.5+1=3\n\n\n128\n512\n384\n128\n256\n128\n256\n\n\n128\n342\n256.5\n128\n256\n128\n256\n\n\n128\n340\n255\n128\n256\n128\n255+1=256\n\n\n128\n338\n253.5\n128\n256\n128\n253.5+1=255\n\n\n\n\u5b9e\u9a8c\u4e00\uff1asyncookies=0\uff0csomaxconn=1024\uff0cbacklog=1024\uff0ctcp_max_syn_backlog=128\n\u8ba1\u7b97\u51fa\u7684\u534a\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\u4e3a 256\n\u5f53\u534a\u8fde\u63a5\u961f\u5217\u957f\u5ea6\u589e\u957f\u81f3 96+1 \u540e\uff0c\u540e\u7eed SYN \u8bf7\u6c42\u5c31\u4f1a\u89e6\u53d1 Drop\n# \u5ba2\u6237\u7aef\u8fdb\u884c\u538b\u6d4b\nhping3 -S -p 8888 --flood 192.168.56.101\n# \u670d\u52a1\u7aef\u6bcf\u79d2\u83b7\u53d6 SYN_RECV \u8fde\u63a5\u6570\uff0c\u7ed3\u679c\u7a33\u5b9a\u5728 97\nwhile true;do echo $(sudo netstat -nat | grep :8888 | grep &#39;SYN_RECV&#39;  | wc -l);sleep 1;done\nwhile true;do echo $(ss -n state syn-recv sport = :8888 | wc -l);sleep 1;done\n\n\u5176\u4ed6\u7684\u53c2\u6570\u8bd5\u9a8c\u89c1\u8868\u683c\u7ed3\u679c\u3002\n\n\u5f00\u542fcookie\u7684\u7ed3\u679c\u5982\u4e0b\uff1a\n\u4e00\u76f4\u65e0\u6cd5\u590d\u73b0\u7f51\u4e0a\u7ed3\u679c\uff0c\u5f85\u5b9a\uff01\n1.7\u3001tcp_v4_conn_request \u6e90\u7801\n\u5185\u6838\u7248\u672c\uff1a3.10.0\nTCP \u7b2c\u4e00\u6b21\u63e1\u624b\uff1a\u6536\u5230 SYN \u5305 \u7684 Linux \u5185\u6838\u4ee3\u7801\u5982\u4e0b\uff0c\u4e0b\u6587\u7f29\u51cf\u4e86\u5927\u91cf\u4ee3\u7801\uff0c\u53ea\u4fdd\u7559\u4e86 TCP \u529e\u8fde\u63a5\u961f\u5217\u6ea2\u51fa\u7684\u5904\u7406\u903b\u8f91\uff1a\n\n\u534a\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\uff0c\u4e14 isn \u4e3a 0\uff0c\u4e14\u6ca1\u6709\u5f00\u542f tcp_syncookies\uff0c\u5219\u4e22\u5f03\u8fde\u63a5\n\u5168\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\uff0c\u4e14\u6ca1\u6709\u91cd\u4f20\u7684\u5305\u7684\u8fde\u63a5\u8bf7\u6c42\u591a\u4f591\u4e2a\uff0c\u5219\u4f1a\u4e22\u5f03\n\u7981\u7528SYN Cookie\u673a\u5236\uff0c\u5e76\u4e14\u961f\u5217\u4e2d\u5269\u4f59\u7684\u8fde\u63a5\u8bf7\u6c42\u6570\u91cf\u5c0f\u4e8e\u6700\u5927\u961f\u5217\u957f\u5ea6\u7684\u56db\u5206\u4e4b\u4e00\uff0c\u540c\u65f6tcp_peer_is_proven\u51fd\u6570\u8fd4\u56defalse\uff08\u8868\u660e\u5f53\u524d\u76ee\u6807\u7aef\u65e0\u6cd5\u88ab\u8bc1\u660e\u662f\u5b58\u6d3b\u7684\uff09\uff0c\u90a3\u4e48\u8fde\u63a5\u8bf7\u6c42\u5c06\u88ab\u62d2\u7edd\u5e76\u91ca\u653e\u3002\n\n// https://elixir.bootlin.com/linux/v3.10/source/net/ipv4/tcp_ipv4.c\n\nint tcp_v4_conn_request(struct sock *sk, struct sk_buff *skb)\n{\n    struct tcp_options_received tmp_opt;\n    struct request_sock *req;\n    struct inet_request_sock *ireq;\n    struct tcp_sock *tp = tcp_sk(sk);\n    struct dst_entry *dst = NULL;\n    __be32 saddr = ip_hdr(skb)-&gt;saddr;\n    __be32 daddr = ip_hdr(skb)-&gt;daddr;\n    __u32 isn = TCP_SKB_CB(skb)-&gt;when;\n    bool want_cookie = false;\n    struct flowi4 fl4;\n    struct tcp_fastopen_cookie foc = { .len = -1 };\n    struct tcp_fastopen_cookie valid_foc = { .len = -1 };\n    struct sk_buff *skb_synack;\n    int do_fastopen;\n\n    /* TW buckets are converted to open requests without\n     * limitations, they conserve resources and peer is\n     * evidently real one.\n     */\n    // 1\u3001\u534a\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\uff0c\u4e14 isn \u4e3a 0\uff0c\u4e14\u6ca1\u6709\u5f00\u542f tcp_syncookies\uff0c\u5219\u4e22\u5f03\u8fde\u63a5\n    if (inet_csk_reqsk_queue_is_full(sk) &amp;&amp; !isn) {\n        want_cookie = tcp_syn_flood_action(sk, skb, &quot;TCP&quot;);\n        if (!want_cookie)\n            goto drop;\n    }\n\n    /* Accept backlog is full. If we have already queued enough\n     * of warm entries in syn queue, drop request. It is better than\n     * clogging syn queue with openreqs with exponentially increasing\n     * timeout.\n     */\n    // \u82e5\u6b64\u65f6 accept queue \u4e5f\u5df2\u6ee1\uff0c\u5e76\u4e14 qlen_young \u7684\u503c\u5927\u4e8e 1\uff08\u5373\u4fdd\u5b58\u5728 SYN queue \u4e2d\u672a\u8fdb\u884c SYN,ACK \u91cd\u4f20\u7684\u8fde\u63a5\u8d85\u8fc7 1 \u4e2a\uff09\n    // \u5219\u76f4\u63a5\u4e22\u5f03\u5f53\u524d SYN \u5305\uff08\u76f8\u5f53\u4e8e\u9488\u5bf9 SYN \u8fdb\u884c\u4e86\u901f\u7387\u9650\u5236\uff09\n    if (sk_acceptq_is_full(sk) &amp;&amp; inet_csk_reqsk_queue_young(sk) &gt; 1) {\n        NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS);\n        goto drop;\n    }\n\n\n     // \u5927\u4f53\u610f\u601d\u5c31\u662f\u5f00\u542f\u4e86 sysctl_tcp_syncookies \uff0c\u5219 want_cookie \u4e3a true   \n    if (want_cookie) {\n        isn = cookie_v4_init_sequence(sk, skb, &amp;req-&gt;mss);\n        req-&gt;cookie_ts = tmp_opt.tstamp_ok;\n    } else if (!isn) {\n        /* VJ&#39;s idea. We save last timestamp seen\n         * from the destination in peer table, when entering\n         * state TIME-WAIT, and check against it before\n         * accepting new connection request.\n         *\n         * If &quot;isn&quot; is not zero, this request hit alive\n         * timewait bucket, so that all the necessary checks\n         * are made in the function processing timewait state.\n         */\n        if (tmp_opt.saw_tstamp &amp;&amp;\n            tcp_death_row.sysctl_tw_recycle &amp;&amp;\n            (dst = inet_csk_route_req(sk, &amp;fl4, req)) != NULL &amp;&amp;\n            fl4.daddr == saddr) {\n            if (!tcp_peer_is_proven(req, dst, true)) {\n                NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_PAWSPASSIVEREJECTED);\n                goto drop_and_release;\n            }\n        }\n        /* Kill the following clause, if you dislike this way. */\n        // 3--\u4e0d\u5f00\u542fcookie\u7684\u60c5\u51b5\uff0cinet_csk_reqsk_queue_len\u4e3a\u5f53\u524d\u961f\u5217\u5927\u5c0f\n        else if (!sysctl_tcp_syncookies &amp;&amp;\n             (sysctl_max_syn_backlog - inet_csk_reqsk_queue_len(sk) &lt;\n              (sysctl_max_syn_backlog &gt;&gt; 2)) &amp;&amp;\n             !tcp_peer_is_proven(req, dst, false)) {\n            /* Without syncookies last quarter of\n             * backlog is filled with destinations,\n             * proven to be alive.\n             * It means that we continue to communicate\n             * to destinations, already remembered\n             * to the moment of synflood.\n             */\n            LIMIT_NETDEBUG(KERN_DEBUG pr_fmt(&quot;drop open request from %pI4/%u\\n&quot;),\n                       &amp;saddr, ntohs(tcp_hdr(skb)-&gt;source));\n            goto drop_and_release;\n        }\n\n        isn = tcp_v4_init_sequence(skb);\n    }\n    tcp_rsk(req)-&gt;snt_isn = isn;\n}\n\n1.8\u3001SYN \u548c ACCEPT \u8fde\u63a5\u56fe\n\nTCP\u8fde\u63a5\u521b\u5efa\u65f6\uff0c\u5ba2\u6237\u7aef\u901a\u8fc7\u53d1\u9001SYN\u62a5\u6587\u53d1\u8d77\u5411\u5904\u4e8e\u76d1\u542c\u72b6\u6001\u7684\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5\uff0c\u670d\u52a1\u5668\u4e3a\u8be5\u8fde\u63a5\u5206\u914d\u4e00\u5b9a\u7684\u8d44\u6e90\uff0c\u5e76\u53d1\u9001SYN+ACK\u62a5\u6587\u3002\u5bf9\u670d\u52a1\u5668\u6765\u8bf4\uff0c\u6b64\u65f6\u8be5\u8fde\u63a5\u7684\u72b6\u6001\u79f0\u4e3a\u534a\u8fde\u63a5(Half-Open)\uff0c\u800c\u5f53\u5176\u4e4b\u540e\u6536\u5230\u5ba2\u6237\u7aef\u56de\u590d\u7684ACK\u62a5\u6587\u540e\uff0c\u8fde\u63a5\u624d\u7b97\u521b\u5efa\u5b8c\u6210\u3002\u5728\u8fd9\u4e2a\u8fc7\u7a0b\u4e2d\uff0c\u5982\u679c\u670d\u52a1\u5668\u4e00\u76f4\u6ca1\u6709\u6536\u5230ACK\u62a5\u6587(\u6bd4\u5982\u5728\u94fe\u8def\u4e2d\u4e22\u5931\u4e86)\uff0c\u670d\u52a1\u5668\u4f1a\u5728\u8d85\u65f6\u540e\u91cd\u4f20SYN+ACK\u3002\n2\u3001\u5168\u8fde\u63a5\u961f\u5217\u5b9e\u6218\n2.1\u3001\u7ed3\u8bba\nTCP \u5168\u8fde\u63a5\u961f\u5217\u7684\u6700\u5927\u503c\u53d6\u51b3\u4e8e somaxconn \u548c backlog \u4e4b\u95f4\u7684\u6700\u5c0f\u503c\uff0c\u4e5f\u5c31\u662f min(somaxconn, backlog)\n\uff08\u51c6\u786e\u70b9\u8bf4\u5e94\u8be5\u662f\u6839\u636e\u5185\u6838\u7248\u672c\u6765\u786e\u8ba4\u4ee3\u7801\u91cc\u9762\u7684\u5224\u65ad\u903b\u8f91\uff0c\u76ee\u524d\u6682\u65f6\u8ba4\u4e3a\u6240\u6709 Linux \u7684\u7248\u672c\u90fd\u662f\u4e0a\u9762\u7684\u7ed3\u8bba\uff09\n\nsomaxconn \u662f Linux \u5185\u6838\u7684\u53c2\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7 /proc/sys/net/core/somaxconn \u6765\u8bbe\u7f6e\u5176\u503c\uff0c\u9ed8\u8ba4\u503c\u6839\u636e\u7248\u672c\u6765\uff0c\u662f128 \u6216\u8005 4096\u3002\n# https://man7.org/linux/man-pages/man2/listen.2.html\nSince Linux 5.4, the default in this file is 4096; in\n       earlier kernels, the default value is 128.  In kernels before\n       2.4.25, this limit was a hard coded value, SOMAXCONN, with the\n       value 128.\n\n\nbacklog \u662f listen(int sockfd, int backlog) \u51fd\u6570\u4e2d\u7684 backlog \u5927\u5c0f\n&lt;Unix \u7f51\u7edc\u7f16\u7a0b&gt;\u5c06\u5176\u63cf\u8ff0\u4e3a\u5df2\u5b8c\u6210\u7684\u8fde\u63a5\u961f\u5217(ESTABLISHED)\u4e0e\u672a\u5b8c\u6210\u8fde\u63a5\u961f\u5217(SYN_RCVD)\u4e4b\u548c\u7684\u4e0a\u9650\n\n\n// https://elixir.bootlin.com/linux/v3.10/source/net/socket.c\nSYSCALL_DEFINE2(listen, int, fd, int, backlog)\n{\n    struct socket *sock;\n    int err, fput_needed;\n    int somaxconn;\n\n    sock = sockfd_lookup_light(fd, &amp;err, &amp;fput_needed);\n    if (sock) {\n        somaxconn = sock_net(sock-&gt;sk)-&gt;core.sysctl_somaxconn;\n        if ((unsigned int)backlog &gt; somaxconn)\n            backlog = somaxconn;\n\n        err = security_socket_listen(sock, backlog);\n        if (!err)\n            err = sock-&gt;ops-&gt;listen(sock, backlog);\n\n        fput_light(sock-&gt;file, fput_needed);\n    }\n    return err;\n}\n\n2.2\u3001\u6d4b\u8bd5\u65b9\u6848\n\n\u901a\u8fc7 wrk \u5bf9\u670d\u52a1\u7aef\u7684 nginx \u53d1\u8d77\u538b\u6d4b\u6765\u67e5\u770b\u5f53\u524d\u961f\u5217 Recv-Q \u4f7f\u7528\u60c5\u51b5\n\u901a\u8fc7 go \u4ee3\u7801\u53d1\u8d77 http \u8bf7\u6c42\uff1a\u53ea\u8d1f\u8d23 Listen \u5bf9\u5e94\u7aef\u53e3\uff0c\u800c\u4e0d\u6267\u884c accept() TCP \u8fde\u63a5\uff0c\u4f7fTCP\u5168\u8fde\u63a5\u961f\u5217\u6ea2\u51fa\uff0c\u6293\u5305\u8fdb\u884c\u5206\u6790\n\n2.3\u3001wrk \u64cd\u4f5c\u8fc7\u7a0b\n\u7cfb\u7edf\u53c2\u6570\u914d\u7f6e\u4fe1\u606f\u5982\u4e0b\n# nginx \u914d\u7f6e\u6587\u4ef6\u7684backlog\uff0c\u9ed8\u8ba4\u4e3a511\uff0c\u53e6\u5916\u5982\u679c\u4fee\u6539\u7684\u8bdd\uff0cnginx\u9700\u8981\u91cd\u542f\uff0creload \u770b\u4e0b\u6765 backlog \u662f\u4e0d\u751f\u6548\u7684\nbacklog = 511\nsysctl -w net.core.somaxconn=128\n# cookies \u5f00\u542f\u5173\u95ed\u90fd\u6d4b\u8bd5\u4e0b\nsysctl -w net.ipv4.tcp_syncookies=0\nsysctl -w net.ipv4.tcp_syncookies=0\n# net.ipv4.tcp_max_syn_backlog=512 \u9ed8\u8ba4\u503c\uff0c\u6ca1\u6709\u4fee\u6539\n# tcp_max_syn_backlog \u4e0d\u52a8\uff0c3.10 \u5185\u6838\u4e0a\u9ed8\u8ba4\u662f 512\uff0cbacklog \u548c max_syn_backlog \u5e94\u8be5\u662f\u6709\u4e00\u5b9a\u5173\u7cfb\u7684\uff0c\u5e94\u8be5\u4e0d\u80fd\u8d85\u8fc7 max_syn_backlog\n\n\u542f\u52a8 nginx \u670d\u52a1\u540e\uff0c\u901a\u8fc7 ss \u786e\u8ba4 Send-Q \u5927\u5c0f\uff08\u6309\u7167 min(128,511) \u539f\u5219\uff0c\u5e94\u662f 128\uff09\n# nginx \u7684\u7aef\u53e3\u4e3a 80\n$ ss -lnt\nState       Recv-Q Send-Q            Local Address:Port                           Peer Address:Port\nLISTEN      0      128                           *:80                                        *:*\n\n\u5ba2\u6237\u7aef\u538b\u6d4b\u8fc7\u7a0b\uff1a\n# \u5ba2\u6237\u7aef\u53d1\u8d77 wrk \u538b\u6d4b\n# -t 20     \u8868\u793a 20 \u4e2a\u7ebf\u7a0b\uff08\u5efa\u8bae\u8c03\u5927\uff0c\u5426\u5219\u6709\u53ef\u80fd\u670d\u52a1\u7aef\u80fd\u5904\u7406\u8fc7\u6765\uff0cRecv-Q \u4e0d\u4f1a\u8d85\u6807\uff09\n# -c 30000  \u8868\u793a 3 \u4e07\u4e2a\u8fde\u63a5\n# -d 60s    \u8868\u793a\u6301\u7eed\u538b\u6d4b 60 \u79d2\n$ ulimit -n 1000000 # \u4e34\u65f6\u8c03\u5927\u70b9\uff0c\u5426\u5219\u6709\u53ef\u80fd\u63d0\u793a Too many open files\n$ wrk -t 20 -c 30000 -d 60s http://192.168.56.101:80\nRunning 1m test @ http://192.168.56.101:80\n  20 threads and 30000 connections\n  Thread Stats   Avg      Stdev     Max   +/- Stdev\n    Latency   278.14ms  197.13ms   1.99s    83.94%\n    Req/Sec   131.67    207.18     1.68k    90.59%\n  43677 requests in 1.01m, 55.90MB read\n  Socket errors: connect 0, read 1022705, write 0, timeout 1369\nRequests/sec:    722.80\nTransfer/sec:      0.93MB\n\n\u670d\u52a1\u7aef\u76f8\u5173\u4fe1\u606f\uff1atcp_syncookies \u5173\u95ed\uff0c\u53d1\u73b0 Recv-Q \u5f88\u5feb\u5c31\u5230\u8fbe 129\uff0c\u4e14\u51e0\u4e4e\u6301\u7eed\u7ef4\u6301\u5728\u8fd9\u4e2a\u503c\uff1b\u53cd\u4e4b\u5982\u679c\u5f00\u542f\u4e86\uff0cRecv-Q \u4e5f\u8fbe\u5230\u8fc7 129\uff0c\u4f46\u662f\u6ce2\u52a8\u5f88\u5927\u3002\u4ece\u5e38\u8bc6\u4e0a\u4e5f\u80fd\u7406\u89e3\u5230\u5f00\u542f cookie \u4e86\u6709\u5b58\u5728\u590d\u7528\uff0c\u6240\u4ee5\u5f53\u524d\u8fde\u63a5\u961f\u5217\u4f1a\u5c0f\u4e00\u70b9\u3002\n# \u95f4\u9694\u4e00\u79d2\uff0c\u5b9a\u65f6\u68c0\u6d4b 80 \u7aef\u53e3\u7684 socket \u8fde\u63a5\u4fe1\u606f\n$ while true;do echo &quot;\u5f53\u524d\u65f6\u95f4:&quot;$(date +%T);ss -lnt |grep -E &#39;Send-Q|80&#39;;sleep 1;done\n\u5f53\u524d\u65f6\u95f4:05:23:55\nState      Recv-Q Send-Q Local Address:Port               Peer Address:Port              \nLISTEN     61     128          *:80                       *:*                  \n\u5f53\u524d\u65f6\u95f4:05:23:56\nState      Recv-Q Send-Q Local Address:Port               Peer Address:Port              \nLISTEN     129    128          *:80                       *:*\n\n\u4e14\u6ce8\u610f\u4e0b\uff0cRecv-Q \u7684\u6700\u5927\u503c\u5c31\u662f \u3010\u5168\u8fde\u63a5\u961f\u5217\u6700\u5927\u503c + 1\u3011\n\u8be5\u73b0\u8c61\u662f\u56e0\u4e3a\u5185\u6838\u5728\u5224\u65ad\u5168\u8fde\u63a5\u662f\u5426\u6ee1\u7684\u60c5\u51b5\u4e0b\uff0c\u4f7f\u7528\u7684\u662f &gt; \u800c\u975e &gt;= \u3002\n// https://github.com/torvalds/linux/blob/v3.10/include/net/sock.h\n// \u68c0\u6d4b\u5168\u8fde\u63a5\u961f\u5217\u662f\u5426\u5df2\u6ee1\u7684\u51fd\u6570\nstatic inline bool sk_acceptq_is_full(const struct sock *sk)\n{\n    // sk_ack_backlog\uff1a\u5f53\u524d\u5168\u8fde\u63a5\u961f\u5217\u7684\u5927\u5c0f\n    // sk_max_ack_backlog\uff1a\u5f53\u524d\u5168\u8fde\u63a5\u7684\u6700\u5927\u961f\u5217\u957f\u5ea6\n    return sk-&gt;sk_ack_backlog &gt; sk-&gt;sk_max_ack_backlog;\n}\n\n\u5f53\u8d85\u8fc7\u4e86 TCP \u6700\u5927\u5168\u8fde\u63a5\u961f\u5217\uff0c\u670d\u52a1\u7aef\u5219\u4f1a\u4e22\u6389\u540e\u7eed\u8fdb\u6765\u7684 TCP \u8fde\u63a5\uff0c\u4e22\u6389\u7684 TCP \u8fde\u63a5\u7684\u4e2a\u6570\u4f1a\u88ab\u7edf\u8ba1\u8d77\u6765\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528 netstat -s \u547d\u4ee4\u6765\u67e5\u770b\uff1a\u6ce8\u610f\u4e0b\uff0c\n$ netstat -s | grep -i listen\n    180233 times the listen queue of a socket overflowed\n    594579 SYNs to LISTEN sockets dropped\n\n2.4\u3001go \u6293\u5305\u64cd\u4f5c\u8fc7\u7a0b\n2.4.1\u3001go \u4ee3\u7801\n\u4e3a\u4e86\u65b9\u4fbf\u5b9e\u9a8c\uff0c\u5c06 server \u7aef\u7684 somaxconn \u5168\u8fde\u63a5\u961f\u5217\u6700\u5927\u957f\u5ea6\u66f4\u65b0\u4e3a 5\uff0c\u53e6\u5916\u542f\u52a8 go \u670d\u52a1\u540e\u8bf7\u901a\u8fc7 ss -lnt \u786e\u8ba4\u662f\u5426\u751f\u6548\nsudo sysctl -w net.core.somaxconn=128\nss -lnt |grep -E 'Send-Q|8888'\nserver \u7aef\n// \u53ea\u8d1f\u8d23 Listen \u5bf9\u5e94\u7aef\u53e3\u800c\u4e0d\u6267\u884c accept() TCP \u8fde\u63a5\n// server.go\n// go build server.go\n// ./server\npackage main\n\nimport (\n  &quot;log&quot;\n  &quot;net&quot;\n  &quot;time&quot;\n)\n\nfunc main() {\n  l, err := net.Listen(&quot;tcp&quot;, &quot;:8888&quot;)\n  if err != nil {\n    log.Printf(&quot;failed to listen due to %v&quot;, err)\n  }\n  defer l.Close()\n  log.Println(&quot;listen :8888 success&quot;)\n\n  for {\n    time.Sleep(time.Second * 100)\n  }\n}\n\nclient \u4ee3\u7801\n// client \u7aef\u5e76\u53d1\u8bf7\u6c42 10 \u6b21 server \u7aef\uff0c\u6210\u529f\u521b\u5efa tcp \u8fde\u63a5\u540e\u5411 server \u7aef\u53d1\u9001\u6570\u636e\npackage main\n\nimport (\n  &quot;context&quot;\n  &quot;log&quot;\n  &quot;net&quot;\n  &quot;os&quot;\n  &quot;os/signal&quot;\n  &quot;sync&quot;\n  &quot;syscall&quot;\n  &quot;time&quot;\n)\n\nvar wg sync.WaitGroup\n\nfunc establishConn(ctx context.Context, i int) {\n  defer wg.Done()\n  conn, err := net.DialTimeout(&quot;tcp&quot;, &quot;192.168.56.101:8888&quot;, time.Second*5)\n  if err != nil {\n    log.Printf(&quot;%d, dial error: %v&quot;, i, err)\n    return\n  }\n  log.Printf(&quot;%d, dial success&quot;, i)\n  _, err = conn.Write([]byte(&quot;hello world&quot;))\n  if err != nil {\n    log.Printf(&quot;%d, send error: %v&quot;, i, err)\n    return\n  }\n  select {\n  case &lt;-ctx.Done():\n    log.Printf(&quot;%d, dail close&quot;, i)\n  }\n}\n\nfunc main() {\n  ctx, cancel := context.WithCancel(context.Background())\n  for i := 0; i &lt; 10; i++ {\n    wg.Add(1)\n    go establishConn(ctx, i)\n  }\n\n  go func() {\n    sc := make(chan os.Signal, 1)\n    signal.Notify(sc, syscall.SIGINT)\n    select {\n    case &lt;-sc:\n      cancel()\n    }\n  }()\n\n2.4.2\u3001\u64cd\u4f5c\u8fc7\u7a0b\n\u670d\u52a1\u7aef\u542f\u52a8\u7a0b\u5e8f\u540e\uff0c\u5ba2\u6237\u7aef\u6309\u7167\u4ee5\u4e0b\u547d\u4ee4\u5f00\u59cb\u6293\u5305\u540e\uff0c\u518d\u6267\u884c\u5ba2\u6237\u7aef\u7a0b\u5e8f\nsudo  tshark -Eheader=y -l -f \"tcp port 8888\" -i any -w client_to_server.pcap\n2.4.3\u3001\u6293\u5305\u7ed3\u679c\u5206\u6790\n\u7b2c\u4e09\u6b65\u7684\u6293\u5305\u7ed3\u679c\u4e0d\u662f\u6bcf\u6b21\u5fc5\u73b0\n2.4.4\u3001\u6293\u5305\u7ed3\u679c-01\n\u6b63\u5e38\u8fde\u63a5\n\n2.4.5\u3001\u6293\u5305\u7ed3\u679c-02\n\nClient \u8ba4\u4e3a\u6210\u529f\u4e0e Server \u7aef\u521b\u5efa tcp socket \u8fde\u63a5\uff0c\u540e\u7eed\u53d1\u9001\u6570\u636e\u5931\u8d25\uff0c\u6301\u7eed RETRY;Server \u7aef\u8ba4\u4e3a TCP \u8fde\u63a5\u672a\u521b\u5efa\uff0c\u4e00\u76f4\u5728\u53d1\u9001SYN+ACK\u3002\nServer \u7aef\u4e3a\u4ec0\u4e48\u4e00\u76f4\u5728 RETRY \u53d1\u9001 SYN+ACK? Server \u7aef\u4e0d\u662f\u5df2\u7ecf\u6536\u5230\u4e86 Client \u7aef\u7684 ACK \u786e\u8ba4\u4e86\u5417?\n\u4e0a\u8ff0\u60c5\u51b5\u662f\u7531\u4e8e Server \u7aef socket \u8fde\u63a5\u8fdb\u5165\u4e86\u534a\u8fde\u63a5\u961f\u5217\uff0c\u5728\u6536\u5230 Client \u7aef ACK \u540e\uff0c\u672c\u5e94\u5c06 socket \u8fde\u63a5\u5b58\u50a8\u5230\u5168\u8fde\u63a5\u961f\u5217\uff0c\u4f46\u662f\u5168\u8fde\u63a5\u961f\u5217\u5df2\u6ee1\uff0c\u6240\u4ee5 Server \u7aef DROP \u4e86\u8be5 ACK \u8bf7\u6c42\u3002\nServer \u7aef\u4e00\u76f4\u5728 RETRY \u53d1\u9001 SYN+ACK\uff0c\u662f\u56e0\u4e3a DROP \u4e86 client \u7aef\u7684 ACK \u8bf7\u6c42\uff0c\u6240\u4ee5 socket \u8fde\u63a5\u4ecd\u65e7\u5728\u534a\u8fde\u63a5\u961f\u5217\u4e2d\uff0c\u7b49\u5f85 Client \u7aef\u56de\u590d ACK\u3002\n\u5168\u8fde\u63a5\u961f\u5217\u6ee1 DROP \u8bf7\u6c42\u662f\u9ed8\u8ba4\u884c\u4e3a\uff0c\u53ef\u4ee5\u901a\u8fc7\u8bbe\u7f6e /proc/sys/net/ipv4/tcp_abort_on_overflow \u4f7f Server \u7aef\u5728\u5168\u8fde\u63a5\u961f\u5217\u6ee1\u65f6\uff0c\u5411 Client \u7aef\u53d1\u9001 RST \u62a5\u6587\u3002\ntcp_abort_on_overflow \u6709\u4e24\u79cd\u53ef\u9009\u503c\uff1a\n\n0\uff1a\u5982\u679c\u5168\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\uff0cServer \u7aef DROP Client \u7aef\u56de\u590d\u7684 ACK \u3010\u9ed8\u8ba4\u503c\u3011\n1\uff1a\u5982\u679c\u5168\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\uff0cServer \u7aef\u5411 Client \u7aef\u53d1\u9001 RST \u62a5\u6587\uff0c\u7ec8\u6b62 TCP socket \u94fe\u63a5\n\n2.4.6\u3001\u6293\u5305\u7ed3\u679c-03\n\nClient \u5411 Server \u53d1\u9001 SYN \u672a\u5f97\u5230\u76f8\u5e94\uff0c\u4e00\u76f4\u5728 RETRY\u3002\n\u9700\u8981\u7ed3\u5408\u534a\u8fde\u63a5\u961f\u5217\u6765\u5206\u6790\uff0c\u7ed3\u8bba\u5982\u4e0b\n1\u3001\u5f00\u542f\u4e86 /proc/sys/net/ipv4/tcp_syncookies \u529f\u80fd\n2\u3001\u5168\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\n3\u3001\u534a\u8fde\u63a5\u961f\u5217\u5b9e\u6218\n3.1\u3001\u7ed3\u8bba\n\u89c1 1.6 \u7ed3\u8bba\n3.2\u3001\u5185\u6838\u4ee3\u7801\u5206\u6790\n\u89c11.7\n3.2.1\u3001\u534a\u8fde\u63a5\u4ee3\u7801\n\u4ee3\u7801\u6d41\u7a0b\u5927\u81f4\u6d41\u7a0b\u5c31\u662f\uff1a\n\u534a\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\uff0c\u4e14 ISN \u4e3a0\uff0c\u5219\u5224\u65ad\u662f\u5426\u5f00\u542f cookie\uff0c\u5982\u679c\u5f00\u542f\u4e86cookie \u8d70\u5176\u4ed6\u903b\u8f91\uff0c\u5982\u679c\u6ca1\u5f00\u542fcookie\uff0c\u5219\u4e22\u5f03\u8be5\u5305\n\u5927\u767d\u8bdd\uff0c\u4e2a\u4eba\u7406\u89e3\u5982\u4e0b\uff08SYN\u6d2a\u6c34\u653b\u51fb\u7684\u903b\u8f91\uff09\uff1a\n\u8fd9\u4e00\u90e8\u5206\u5e94\u8be5\u662f SYN \u6d2a\u6c34\u653b\u51fb\u907f\u514d\u7684\u5b9e\u73b0\u903b\u8f91\uff0cSYN\u6d2a\u6c34\u653b\u51fb\u4e2d\uff0c\u653b\u51fb\u8005\u901a\u5e38\u4f1a\u5c06TCP\u63e1\u624b\u8fc7\u7a0b\u4e2d\u7684\u8c03\u7528\u65b9\u5e8f\u5217\u53f7\uff08ISN\uff09\u7f6e\u4e3a0\uff0c\u76ee\u7684\u5728\u4e8e\u6df7\u6dc6\u76ee\u6807\u4e3b\u673a\uff0c\u5e76\u4f7f\u5176\u65e0\u6cd5\u6b63\u786e\u5730\u5904\u7406TCP\u8fde\u63a5\u8bf7\u6c42\u3002\n\u6240\u4ee5\u65b9\u6cd5\u7684\u903b\u8f91\u662f !isn\uff0c\u5982\u679c\u961f\u5217\u5df2\u6ee1\uff0c\u4e14\u6709 ISN=0 \u7684\u60c5\u51b5\uff0c\u5219\u8d70\u5230 want_cookie \u7684\u903b\u8f91\uff1b\n\u5982\u679c\u4e0d\u9700\u8981\u8fdb\u884c cookie \u9a8c\u8bc1\uff0c\u5219\u76f4\u63a5\u8df3\u8f6c\u5230 drop\uff0c\u5373\u4e22\u5f03\u8be5\u6570\u636e\u5305\u3002\n// \u534a\u8fde\u63a5\u961f\u5217\u6ee1\u4e86\uff0c\u4e14 isn \u4e3a 0\uff1a\u5373\u6ca1\u6709\u751f\u6210\u521d\u59cb\u5e8f\u5217\u53f7\nif (inet_csk_reqsk_queue_is_full(sk) &amp;&amp; !isn) {\n    want_cookie = tcp_syn_flood_action(sk, skb, &quot;TCP&quot;);\n    if (!want_cookie)\n        goto drop;\n}\n\n/*\n    \u7b2c\u4e00\u5904\u5206\u6790\n    https://elixir.bootlin.com/linux/v3.10/source/include/net/inet_connection_sock.h#L297\n    \u8be5\u51fd\u6570\u4e3b\u8981\u901a\u8fc7\u8c03\u7528reqsk_queue_is_full\u51fd\u6570\u6765\u5224\u65adTCP\u5957\u63a5\u5b57\u7684\u8bf7\u6c42\u961f\u5217\u662f\u5426\u5df2\u6ee1\uff0c\u51fd\u6570\u8f93\u5165\u53c2\u6570\u4e3aTCP\u5957\u63a5\u5b57sk.\n    \u5728\u51fd\u6570\u5b9e\u73b0\u4e2d\uff0c\u9996\u5148\u8c03\u7528inet_csk\u51fd\u6570\u83b7\u53d6TCP\u5957\u63a5\u5b57\u7684\u4f20\u8f93\u63a7\u5236\u5757\uff0c\u5e76\u901a\u8fc7icsk_accept_queue\u8bbf\u95ee\u8bf7\u6c42\u961f\u5217\uff0c\u4ece\u800c\u5224\u65ad\u8be5\u8bf7\u6c42\u961f\u5217\u662f\u5426\u5df2\u6ee1.\n    \u961f\u5217\u5df2\u6ee1,\u51fd\u6570  \u8fd4\u56de 1;\n    \u961f\u5217\u672a\u6ee1,\u51fd\u6570  \u8fd4\u56de 0.\n*/\nstatic inline int inet_csk_reqsk_queue_is_full(const struct sock *sk)\n{\n    return reqsk_queue_is_full(&amp;inet_csk(sk)-&gt;icsk_accept_queue);\n}\n\nstatic inline int reqsk_queue_is_full(const struct request_sock_queue *queue)\n{\n    /*\n     C\u8bed\u8a00\u4e0d\u61c2\uff0c\u67e5\u9605\u8d44\u6599\u8bf4\u662f\u8fd9\u6bb5\u4ee3\u7801\u7684\u610f\u601d\u662f\n     \u7528\u4e8e\u68c0\u67e5\u4e00\u4e2a\u8bf7\u6c42\u961f\u5217\u662f\u5426\u5df2\u6ee1\u3002\u8be5\u51fd\u6570\u7684\u4f5c\u7528\u662f\u5224\u65ad\u6307\u5b9a\u7684\u8bf7\u6c42\u961f\u5217\u662f\u5426\u5df2\u7ecf\u8fbe\u5230\u4e86\u6700\u5927\u961f\u5217\u957f\u5ea6\uff0c\u5982\u679c\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u5219\u8fd4\u56de1\uff0c\u5426\u5219\u8fd4\u56de0\u3002\n    */\n    return queue-&gt;listen_opt-&gt;qlen &gt;&gt; queue-&gt;listen_opt-&gt;max_qlen_log;\n}\n\n\n/*\n    \u7b2c\u4e8c\u5904\u5206\u6790\uff1a!isn\uff0c\u80fd\u6b63\u5e38\u5f80\u8be5\u51fd\u6570\u7ee7\u7eed\u5f80\u4e0b\u8d70\uff0c\u4e5f\u5c31\u662f isn \u4e3a 0\n    \u4e00\u4e2aTCP\u8fde\u63a5\u7684ISN\u88ab\u8bbe\u7f6e\u4e3a0\uff0c\u8fd9\u610f\u5473\u7740\u8fd9\u4e2a\u8fde\u63a5\u6ca1\u6709\u5df2\u77e5\u7684\u521d\u59cb\u5e8f\u5217\u53f7\u3002\u8fd9\u610f\u5473\u7740\u53d1\u9001\u65b9\u548c\u63a5\u6536\u65b9\u90fd\u5c06\u4ece\u521d\u59cb\u4f4d\u7f6e\u5f00\u59cb\u4f20\u8f93\u6570\u636e\u3002\n\n    __u32 isn = TCP_SKB_CB(skb)-&gt;when;\n    \u8fd9\u6bb5\u4ee3\u7801\u662f\u4eceskb\u4e2d\u83b7\u53d6TCP\u534f\u8bae\u5757\u7684\u53d1\u9001\u65f6\u95f4\u6233\uff0c\u5e76\u5c06\u5176\u8d4b\u503c\u7ed9\u53d8\u91cfisn\u3002\n\n    __u32\uff1aunsigned 32-bit integer\uff08\u65e0\u7b26\u53f732\u4f4d\u6574\u6570\uff09\n    TCP_SKB_CB(skb)\u662f\u4e00\u4e2a\u5b8f\u5b9a\u4e49\uff0c\u7528\u4e8e\u83b7\u53d6\u6307\u5411TCP\u534f\u8bae\u5757\u5934\u90e8\u7684\u6307\u9488\uff0c\u8fd9\u91cc\u4f7f\u7528when\u5b57\u6bb5\u6765\u8868\u793a\u8be5TCP\u534f\u8bae\u5757\u7684\u53d1\u9001\u65f6\u95f4\u6233\u3002\n*/\n\n\n/*\n    \u7b2c\u4e09\u5904\u5206\u6790\uff1atcp_syn_flood_action\n    https://elixir.bootlin.com/linux/v3.10/source/net/ipv4/tcp_ipv4.c\n    Return true if a syncookie should be sent\n    \u5927\u4f53\u610f\u601d\u5c31\u662f\u5f00\u542f\u4e86 sysctl_tcp_syncookies \uff0c\u5219 want_cookie \u4e3a true\n    \u8fd9\u4e2a\u53c2\u6570\u9ed8\u8ba4\u503c\u4e3a1\uff0c\u53ef\u4ee5\u901a\u8fc7\u4fee\u6539 /proc/sys/net/ipv4/tcp_syncookies \u6587\u4ef6\u6216\u8005\u4f7f\u7528sysctl\u547d\u4ee4\u8fdb\u884c\u4fee\u6539\n*/\n\n3.2.2\u3001\u5168\u8fde\u63a5\u4ee3\u7801\n\u82e5\u6b64\u65f6 accept queue \u4e5f\u5df2\u6ee1\uff0c\u5e76\u4e14 qlen_young \u7684\u503c\u5927\u4e8e 1\uff08\u5373\u4fdd\u5b58\u5728 SYN queue \u4e2d\u672a\u8fdb\u884c SYN,ACK \u91cd\u4f20\u7684\u8fde\u63a5\u8d85\u8fc7 1 \u4e2a\uff09\uff0c\u5219\u76f4\u63a5\u4e22\u5f03\u5f53\u524d SYN \u5305\uff08\u76f8\u5f53\u4e8e\u9488\u5bf9 SYN \u8fdb\u884c\u4e86\u901f\u7387\u9650\u5236\uff09\nif (sk_acceptq_is_full(sk) &amp;&amp; inet_csk_reqsk_queue_young(sk) &gt; 1) {\n    NET_INC_STATS_BH(sock_net(sk), LINUX_MIB_LISTENOVERFLOWS);\n    goto drop;\n}\n\n\u7b2c\u4e00\u5904\u4ee3\u7801\u5206\u6790\u5982\u4e0b\n/*\n    https://elixir.bootlin.com/linux/v3.10/source/include/net/sock.h#L723\n    \u5982\u679cTCP\u8fde\u63a5\u8bf7\u6c42\u63a5\u6536\u961f\u5217\u5df2\u6ee1\uff0c\u5219\u8fd4\u56detrue\u3002\n    \u901a\u8fc7\u68c0\u67e5 backlog \u548c sk_max_ack_backlog \u5b57\u6bb5\u7684\u503c\uff0c\u6765\u51b3\u5b9aTCP\u8fde\u63a5\u8bf7\u6c42\u961f\u5217\u662f\u5426\u5df2\u6ee1\u3002\n    sk_ack_backlog  \u5f53\u524d\u5168\u8fde\u63a5\u961f\u5217\u5927\u5c0f\n    sk_max_ack_backlog  \u5168\u8fde\u63a5\u961f\u5217\u6700\u5927\u503c min(somaxconn,backlog)\n*/\nstatic inline bool sk_acceptq_is_full(const struct sock *sk)\n{\n    return sk-&gt;sk_ack_backlog &gt; sk-&gt;sk_max_ack_backlog;\n}\n\n//\n\n\u7b2c\u4e8c\u5904\u4ee3\u7801\u5206\u6790\u5982\u4e0b\n/*\n    https://elixir.bootlin.com/linux/v3.10/source/include/net/inet_connection_sock.h#L292\n    \u770b\u7684\u4e0d\u662f\u5f88\u660e\u767d\uff0cqlen_young \u6ca1\u7406\u89e3\u610f\u601d\uff0c\u673a\u68b0\u7406\u89e3\u6210 \u4fdd\u5b58\u5728 SYN queue \u4e2d\u672a\u8fdb\u884c SYN,ACK \u91cd\u4f20\u7684\u8fde\u63a5\n*/\nstatic inline int inet_csk_reqsk_queue_young(const struct sock *sk)\n{\n    return reqsk_queue_len_young(&amp;inet_csk(sk)-&gt;icsk_accept_queue);\n}\n// https://elixir.bootlin.com/linux/v3.10/source/include/net/request_sock.h#L252\nstatic inline int reqsk_queue_len_young(const struct request_sock_queue *queue)\n{\n    return queue-&gt;listen_opt-&gt;qlen_young;\n}\n\n/** struct listen_sock - listen state\n *\n * @max_qlen_log - log_2 of maximal queued SYNs/REQUESTs\n */\nstruct listen_sock {\n    u8          max_qlen_log;\n    u8          synflood_warned;\n    /* 2 bytes hole, try to use */\n    int         qlen;\n    int         qlen_young;\n    int         clock_hand;\n    u32         hash_rnd;\n    u32         nr_table_entries;\n    struct request_sock *syn_table[0];\n};\n\n3.3.3\u3001\u8bf7\u6c42\u961f\u5217\u6ea2\u51fa\u65f6\u7684\u903b\u8f91\n\u4ee3\u7801\u5c55\u793a\u4e86Linux\u5185\u6838\u4e2d\u5728TCP\u8fde\u63a5\u8bf7\u6c42\u961f\u5217\u6ea2\u51fa\u65f6\u7684\u903b\u8f91\nelse if (!sysctl_tcp_syncookies &amp;&amp;\n             (sysctl_max_syn_backlog - inet_csk_reqsk_queue_len(sk) &lt;\n              (sysctl_max_syn_backlog &gt;&gt; 2)) &amp;&amp;\n             !tcp_peer_is_proven(req, dst, false)) {\n            /* Without syncookies last quarter of\n             * backlog is filled with destinations,\n             * proven to be alive.\n             * It means that we continue to communicate\n             * to destinations, already remembered\n             * to the moment of synflood.\n             */\n            LIMIT_NETDEBUG(KERN_DEBUG pr_fmt(&quot;drop open request from %pI4/%u\\n&quot;),\n                       &amp;saddr, ntohs(tcp_hdr(skb)-&gt;source));\n            goto drop_and_release;\n        }\n\n4\u3001\u53c2\u8003\u6587\u6863\n\u4ece\u4e00\u6b21\u7ebf\u4e0a\u95ee\u9898\u8bf4\u8d77\uff0c\u8be6\u89e3 TCP \u534a\u8fde\u63a5\u961f\u5217\u3001\u5168\u8fde\u63a5\u961f\u5217\n\nhttps://mp.weixin.qq.com/s/YpSlU1yaowTs-pF6R43hMw\n\n\u6df1\u5165\u6d45\u51faTCP\u4e2d\u7684SYN-Cookies\n\nhttps://segmentfault.com/a/1190000019292140\n\nTCP \u534a\u8fde\u63a5\u961f\u5217\u548c\u5168\u8fde\u63a5\u961f\u5217\n\nhttps://xiaolincoding.com/network/3_tcp/tcp_queue.html#%E4%BB%80%E4%B9%88%E6%98%AF-tcp-%E5%8D%8A%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97%E5%92%8C%E5%85%A8%E8%BF%9E%E6%8E%A5%E9%98%9F%E5%88%97\n\n\u8be6\u89e3 TCP \u534a\u8fde\u63a5\u961f\u5217\u4e0e\u5168\u8fde\u63a5\u961f\u5217\n\nhttps://wgzhao.github.io/notes/troubleshooting/deep-in-tcp-connect/\n\n\u4ece Linux \u6e90\u7801\u770b Socket (TCP) \u7684 listen \u53ca\u8fde\u63a5\u961f\u5217\n\nhttps://my.oschina.net/alchemystar/blog/4672630\n\n\u8be6\u89e3 TCP \u534a\u8fde\u63a5\u961f\u5217\u4e0e\u5168\u8fde\u63a5\u961f\u5217\n\nhttps://wgzhao.github.io/notes/troubleshooting/deep-in-tcp-connect/\n\n[\u5185\u6838\u6e90\u7801] \u7f51\u7edc\u534f\u8bae\u6808 - listen (tcp)\n\nhttps://wenfh2020.com/2021/07/21/kernel-sys-listen/\n\nsocket API \u5b9e\u73b0\n\nhttp://blog.guorongfei.com/tags/socket/\n\nSYN packet handling in the wild\n\nhttps://blog.cloudflare.com/syn-packet-handling-in-the-wild/\n\n", "categories": [{"name": "Maverick", "slug": "Maverick", "permalink": "/Blog-With-GitHub-Boilerplate/category/Maverick/"}], "tags": [{"name": "TCP", "slug": "TCP", "permalink": "/Blog-With-GitHub-Boilerplate/tag/TCP/"}]}, {"title": "Hello World!", "date": "2019-12-18T16:50:00-00.00", "path": "/Blog-With-GitHub-Boilerplate/archives/typography/", "text": "\u8fd9\u662f\u4e00\u7bc7\u793a\u4f8b\u6587\u7ae0\uff0c\u5728\u8fd9\u91cc\u4f60\u53ef\u4ee5\u770b\u5230\u5e38\u7528\u9875\u9762\u5143\u7d20\u7684\u663e\u793a\u6548\u679c\uff0c\u540c\u65f6\u4e5f\u662f Markdown \u8bed\u6cd5\u7684\u53c2\u8003\u6587\u7ae0\u3002\u4fdd\u7559\u6216\u8005\u5220\u9664\u672c\u6587\uff0c\u5f00\u59cb\u81ea\u5df1\u7684\u521b\u4f5c\u5427\uff01L2 Heading\nL3 Heading\nL4 Heading\nL5 Heading\nL6 Heading\nParagraph\nWe are creating a world that all may enter without privilege or prejudice accorded by race, economic power, military force, or station of birth.\nWe are creating a world where anyone, anywhere may express his or her beliefs, no matter how singular, without fear of being coerced into silence or conformity.\nInline elements\nBold, Ruby(\u30eb\u30d3), Italic, Strikethrough, Link1\u3002\nBlockquote and nested blockquote\n\u5b89\u5f97\u5e7f\u53a6\u5343\u4e07\u95f4\uff0c\u5927\u5e87\u5929\u4e0b\u5bd2\u58eb\u4ff1\u6b22\u989c\uff01\u98ce\u96e8\u4e0d\u52a8\u5b89\u5982\u5c71\u3002\n\u545c\u547c\uff01\u4f55\u65f6\u773c\u524d\u7a81\u5140\u89c1\u6b64\u5c4b\uff0c\u543e\u5e90\u72ec\u7834\u53d7\u51bb\u6b7b\u4ea6\u8db3\uff01\n\n\nCode\nInline code: int a=1;. Code block:\nint main(int argc , char** argv){\n    std::cout &lt;&lt; &quot;Hello World!\\n&quot;;\n    return 0;\n}\n\nList\nUnordered List\n\niPhone\niPhone X\niPhone 11\n\n\niPad\nMacBook\n\nOrdered List\n\n\u6253\u5f00\u51b0\u7bb1\n\u53f3\u624b\u653e\u5728\u51b0\u7bb1\u95e8\u62c9\u624b\u4e0a\n\u5de6\u624b\u6276\u4f4f\u51b0\u7bb1\u4e3b\u4f53\n\u53f3\u624b\u5411\u540e\u7528\u529b\n\n\n\u628a\u5927\u8c61\u653e\u8fdb\u51b0\u7bb1\n\u5173\u4e0a\u51b0\u7bb1\n\nHorizontal rule\n\nMath\nInline Math: $m\\times n$, math block:\n$$C_{m\\times k}=A_{m\\times n}\\cdot B_{n\\times k}$$\nFigures\nSingle figure\nPrincess Mononoke\nPhotoset\n\n\n\n\n\n\nTable\n\n\nheader\nheader\n\n\n\n\ncell 1\ncell 2\n\n\ncell 3\ncell 4\n\n\n\nLink Card\n\n                                  AlanDecodeHome page for AlanDecode \u21a9", "categories": [{"name": "Maverick", "slug": "Maverick", "permalink": "/Blog-With-GitHub-Boilerplate/category/Maverick/"}], "tags": [{"name": "Design", "slug": "Design", "permalink": "/Blog-With-GitHub-Boilerplate/tag/Design/"}, {"name": "Typography", "slug": "Typography", "permalink": "/Blog-With-GitHub-Boilerplate/tag/Typography/"}]}], "pages": [{"title": "\u5173\u4e8e", "date": "2017-06-28T17:26:00-00.00", "path": "/Blog-With-GitHub-Boilerplate/about/", "text": "\u8fd9\u91cc\u662f\u6211\u7684\u4e2a\u4eba\u535a\u5ba2\uff0c\u901a\u8fc7 GitHub \u7ba1\u7406\u4e0e\u6784\u5efa\u3002\nContact\nEmail:\nTelegram\uff1a\n", "categories": [], "tags": []}]}